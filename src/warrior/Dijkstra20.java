package warrior;

import battlecode.common.Direction;
import battlecode.common.GameActionException;
import battlecode.common.MapLocation;
import battlecode.common.RobotController;

// Generated by scripts/dijkstra.py
// Based on Malott Fat Cats's 2021 pathfinding
// Malott Fat Cats's 2021 post-mortem: https://www.battlecode.org/files/postmortem-2021-malott-fat-cats.pdf
public class Dijkstra20 {
    private static RobotController rc;

    private static int mapWidth;
    private static int mapHeight;

    private static MapLocation myLocation;
    private static int myX;
    private static int myY;
    private static int xOffset;
    private static int yOffset;

    private static MapLocation location1;
    private static double distance1;
    private static Direction direction1;
    private static double remainingDistance1;
    private static double totalScore1;
    private static MapLocation location2;
    private static double distance2;
    private static Direction direction2;
    private static double remainingDistance2;
    private static double totalScore2;
    private static MapLocation location3;
    private static double distance3;
    private static Direction direction3;
    private static double remainingDistance3;
    private static double totalScore3;
    private static MapLocation location4;
    private static double distance4;
    private static Direction direction4;
    private static double remainingDistance4;
    private static double totalScore4;
    private static MapLocation location5;
    private static double distance5;
    private static Direction direction5;
    private static double remainingDistance5;
    private static double totalScore5;
    private static MapLocation location6;
    private static double distance6;
    private static Direction direction6;
    private static double remainingDistance6;
    private static double totalScore6;
    private static MapLocation location7;
    private static double distance7;
    private static Direction direction7;
    private static double remainingDistance7;
    private static double totalScore7;
    private static MapLocation location8;
    private static double distance8;
    private static Direction direction8;
    private static double remainingDistance8;
    private static double totalScore8;
    private static MapLocation location9;
    private static double distance9;
    private static Direction direction9;
    private static double remainingDistance9;
    private static double totalScore9;
    private static MapLocation location12;
    private static double distance12;
    private static Direction direction12;
    private static double remainingDistance12;
    private static double totalScore12;
    private static MapLocation location15;
    private static double distance15;
    private static Direction direction15;
    private static double remainingDistance15;
    private static double totalScore15;
    private static MapLocation location18;
    private static double distance18;
    private static Direction direction18;
    private static double remainingDistance18;
    private static double totalScore18;
    private static MapLocation location10;
    private static double distance10;
    private static Direction direction10;
    private static double remainingDistance10;
    private static double totalScore10;
    private static MapLocation location11;
    private static double distance11;
    private static Direction direction11;
    private static double remainingDistance11;
    private static double totalScore11;
    private static MapLocation location13;
    private static double distance13;
    private static Direction direction13;
    private static double remainingDistance13;
    private static double totalScore13;
    private static MapLocation location14;
    private static double distance14;
    private static Direction direction14;
    private static double remainingDistance14;
    private static double totalScore14;
    private static MapLocation location16;
    private static double distance16;
    private static Direction direction16;
    private static double remainingDistance16;
    private static double totalScore16;
    private static MapLocation location17;
    private static double distance17;
    private static Direction direction17;
    private static double remainingDistance17;
    private static double totalScore17;
    private static MapLocation location19;
    private static double distance19;
    private static Direction direction19;
    private static double remainingDistance19;
    private static double totalScore19;
    private static MapLocation location20;
    private static double distance20;
    private static Direction direction20;
    private static double remainingDistance20;
    private static double totalScore20;
    private static MapLocation location21;
    private static double distance21;
    private static Direction direction21;
    private static double remainingDistance21;
    private static double totalScore21;
    private static MapLocation location22;
    private static double distance22;
    private static Direction direction22;
    private static double remainingDistance22;
    private static double totalScore22;
    private static MapLocation location23;
    private static double distance23;
    private static Direction direction23;
    private static double remainingDistance23;
    private static double totalScore23;
    private static MapLocation location24;
    private static double distance24;
    private static Direction direction24;
    private static double remainingDistance24;
    private static double totalScore24;
    private static MapLocation location25;
    private static double distance25;
    private static Direction direction25;
    private static double remainingDistance25;
    private static double totalScore25;
    private static MapLocation location30;
    private static double distance30;
    private static Direction direction30;
    private static double remainingDistance30;
    private static double totalScore30;
    private static MapLocation location35;
    private static double distance35;
    private static Direction direction35;
    private static double remainingDistance35;
    private static double totalScore35;
    private static MapLocation location40;
    private static double distance40;
    private static Direction direction40;
    private static double remainingDistance40;
    private static double totalScore40;
    private static MapLocation location26;
    private static double distance26;
    private static Direction direction26;
    private static double remainingDistance26;
    private static double totalScore26;
    private static MapLocation location27;
    private static double distance27;
    private static Direction direction27;
    private static double remainingDistance27;
    private static double totalScore27;
    private static MapLocation location31;
    private static double distance31;
    private static Direction direction31;
    private static double remainingDistance31;
    private static double totalScore31;
    private static MapLocation location32;
    private static double distance32;
    private static Direction direction32;
    private static double remainingDistance32;
    private static double totalScore32;
    private static MapLocation location36;
    private static double distance36;
    private static Direction direction36;
    private static double remainingDistance36;
    private static double totalScore36;
    private static MapLocation location37;
    private static double distance37;
    private static Direction direction37;
    private static double remainingDistance37;
    private static double totalScore37;
    private static MapLocation location41;
    private static double distance41;
    private static Direction direction41;
    private static double remainingDistance41;
    private static double totalScore41;
    private static MapLocation location42;
    private static double distance42;
    private static Direction direction42;
    private static double remainingDistance42;
    private static double totalScore42;
    private static MapLocation location28;
    private static double distance28;
    private static Direction direction28;
    private static double remainingDistance28;
    private static double totalScore28;
    private static MapLocation location29;
    private static double distance29;
    private static Direction direction29;
    private static double remainingDistance29;
    private static double totalScore29;
    private static MapLocation location33;
    private static double distance33;
    private static Direction direction33;
    private static double remainingDistance33;
    private static double totalScore33;
    private static MapLocation location34;
    private static double distance34;
    private static Direction direction34;
    private static double remainingDistance34;
    private static double totalScore34;
    private static MapLocation location38;
    private static double distance38;
    private static Direction direction38;
    private static double remainingDistance38;
    private static double totalScore38;
    private static MapLocation location39;
    private static double distance39;
    private static Direction direction39;
    private static double remainingDistance39;
    private static double totalScore39;
    private static MapLocation location43;
    private static double distance43;
    private static Direction direction43;
    private static double remainingDistance43;
    private static double totalScore43;
    private static MapLocation location44;
    private static double distance44;
    private static Direction direction44;
    private static double remainingDistance44;
    private static double totalScore44;
    private static MapLocation location49;
    private static double distance49;
    private static Direction direction49;
    private static double remainingDistance49;
    private static double totalScore49;
    private static MapLocation location54;
    private static double distance54;
    private static Direction direction54;
    private static double remainingDistance54;
    private static double totalScore54;
    private static MapLocation location59;
    private static double distance59;
    private static Direction direction59;
    private static double remainingDistance59;
    private static double totalScore59;
    private static MapLocation location64;
    private static double distance64;
    private static Direction direction64;
    private static double remainingDistance64;
    private static double totalScore64;
    private static MapLocation location50;
    private static double distance50;
    private static Direction direction50;
    private static double remainingDistance50;
    private static double totalScore50;
    private static MapLocation location51;
    private static double distance51;
    private static Direction direction51;
    private static double remainingDistance51;
    private static double totalScore51;
    private static MapLocation location55;
    private static double distance55;
    private static Direction direction55;
    private static double remainingDistance55;
    private static double totalScore55;
    private static MapLocation location56;
    private static double distance56;
    private static Direction direction56;
    private static double remainingDistance56;
    private static double totalScore56;
    private static MapLocation location60;
    private static double distance60;
    private static Direction direction60;
    private static double remainingDistance60;
    private static double totalScore60;
    private static MapLocation location61;
    private static double distance61;
    private static Direction direction61;
    private static double remainingDistance61;
    private static double totalScore61;
    private static MapLocation location65;
    private static double distance65;
    private static Direction direction65;
    private static double remainingDistance65;
    private static double totalScore65;
    private static MapLocation location66;
    private static double distance66;
    private static Direction direction66;
    private static double remainingDistance66;
    private static double totalScore66;
    private static MapLocation location45;
    private static double distance45;
    private static Direction direction45;
    private static double remainingDistance45;
    private static double totalScore45;
    private static MapLocation location46;
    private static double distance46;
    private static Direction direction46;
    private static double remainingDistance46;
    private static double totalScore46;
    private static MapLocation location47;
    private static double distance47;
    private static Direction direction47;
    private static double remainingDistance47;
    private static double totalScore47;
    private static MapLocation location48;
    private static double distance48;
    private static Direction direction48;
    private static double remainingDistance48;
    private static double totalScore48;
    private static MapLocation location52;
    private static double distance52;
    private static Direction direction52;
    private static double remainingDistance52;
    private static double totalScore52;
    private static MapLocation location53;
    private static double distance53;
    private static Direction direction53;
    private static double remainingDistance53;
    private static double totalScore53;
    private static MapLocation location57;
    private static double distance57;
    private static Direction direction57;
    private static double remainingDistance57;
    private static double totalScore57;
    private static MapLocation location58;
    private static double distance58;
    private static Direction direction58;
    private static double remainingDistance58;
    private static double totalScore58;
    private static MapLocation location62;
    private static double distance62;
    private static Direction direction62;
    private static double remainingDistance62;
    private static double totalScore62;
    private static MapLocation location63;
    private static double distance63;
    private static Direction direction63;
    private static double remainingDistance63;
    private static double totalScore63;
    private static MapLocation location67;
    private static double distance67;
    private static Direction direction67;
    private static double remainingDistance67;
    private static double totalScore67;
    private static MapLocation location68;
    private static double distance68;
    private static Direction direction68;
    private static double remainingDistance68;
    private static double totalScore68;

    private static double weight;

    private static double currentDistance;

    private static double score28;
    private static double score29;
    private static double score33;
    private static double score34;
    private static double score38;
    private static double score39;
    private static double score43;
    private static double score44;
    private static double score49;
    private static double score54;
    private static double score59;
    private static double score64;
    private static double score50;
    private static double score51;
    private static double score55;
    private static double score56;
    private static double score60;
    private static double score61;
    private static double score65;
    private static double score66;
    private static double score45;
    private static double score46;
    private static double score47;
    private static double score48;
    private static double score52;
    private static double score53;
    private static double score57;
    private static double score58;
    private static double score62;
    private static double score63;
    private static double score67;

    private static double maxScore;

    public Dijkstra20(RobotController rc) {
        Dijkstra20.rc = rc;

        mapWidth = rc.getMapWidth();
        mapHeight = rc.getMapHeight();
    }

    public Direction getBestDirection(MapLocation target, Direction blockedDirection) throws GameActionException {
        myLocation = rc.getLocation();
        myX = myLocation.x;
        myY = myLocation.y;
        xOffset = mapWidth - myX;
        yOffset = mapHeight - myY;

        location1 = rc.adjacentLocation(Direction.WEST);
        distance1 = 1_000_000.0;
        remainingDistance1 = location1.distanceSquaredTo(target);
        totalScore1 = distance1 + remainingDistance1;
        location2 = rc.adjacentLocation(Direction.EAST);
        distance2 = 1_000_000.0;
        remainingDistance2 = location2.distanceSquaredTo(target);
        totalScore2 = distance2 + remainingDistance2;
        location3 = rc.adjacentLocation(Direction.SOUTH);
        distance3 = 1_000_000.0;
        remainingDistance3 = location3.distanceSquaredTo(target);
        totalScore3 = distance3 + remainingDistance3;
        location4 = rc.adjacentLocation(Direction.NORTH);
        distance4 = 1_000_000.0;
        remainingDistance4 = location4.distanceSquaredTo(target);
        totalScore4 = distance4 + remainingDistance4;
        location5 = rc.adjacentLocation(Direction.SOUTHWEST);
        distance5 = 1_000_000.0;
        remainingDistance5 = location5.distanceSquaredTo(target);
        totalScore5 = distance5 + remainingDistance5;
        location6 = rc.adjacentLocation(Direction.NORTHWEST);
        distance6 = 1_000_000.0;
        remainingDistance6 = location6.distanceSquaredTo(target);
        totalScore6 = distance6 + remainingDistance6;
        location7 = rc.adjacentLocation(Direction.SOUTHEAST);
        distance7 = 1_000_000.0;
        remainingDistance7 = location7.distanceSquaredTo(target);
        totalScore7 = distance7 + remainingDistance7;
        location8 = rc.adjacentLocation(Direction.NORTHEAST);
        distance8 = 1_000_000.0;
        remainingDistance8 = location8.distanceSquaredTo(target);
        totalScore8 = distance8 + remainingDistance8;
        location9 = location1.add(Direction.WEST);
        distance9 = 1_000_000.0;
        remainingDistance9 = location9.distanceSquaredTo(target);
        totalScore9 = distance9 + remainingDistance9;
        location12 = location2.add(Direction.EAST);
        distance12 = 1_000_000.0;
        remainingDistance12 = location12.distanceSquaredTo(target);
        totalScore12 = distance12 + remainingDistance12;
        location15 = location3.add(Direction.SOUTH);
        distance15 = 1_000_000.0;
        remainingDistance15 = location15.distanceSquaredTo(target);
        totalScore15 = distance15 + remainingDistance15;
        location18 = location4.add(Direction.NORTH);
        distance18 = 1_000_000.0;
        remainingDistance18 = location18.distanceSquaredTo(target);
        totalScore18 = distance18 + remainingDistance18;
        location10 = location1.add(Direction.SOUTHWEST);
        distance10 = 1_000_000.0;
        remainingDistance10 = location10.distanceSquaredTo(target);
        totalScore10 = distance10 + remainingDistance10;
        location11 = location1.add(Direction.NORTHWEST);
        distance11 = 1_000_000.0;
        remainingDistance11 = location11.distanceSquaredTo(target);
        totalScore11 = distance11 + remainingDistance11;
        location13 = location2.add(Direction.SOUTHEAST);
        distance13 = 1_000_000.0;
        remainingDistance13 = location13.distanceSquaredTo(target);
        totalScore13 = distance13 + remainingDistance13;
        location14 = location2.add(Direction.NORTHEAST);
        distance14 = 1_000_000.0;
        remainingDistance14 = location14.distanceSquaredTo(target);
        totalScore14 = distance14 + remainingDistance14;
        location16 = location3.add(Direction.SOUTHWEST);
        distance16 = 1_000_000.0;
        remainingDistance16 = location16.distanceSquaredTo(target);
        totalScore16 = distance16 + remainingDistance16;
        location17 = location3.add(Direction.SOUTHEAST);
        distance17 = 1_000_000.0;
        remainingDistance17 = location17.distanceSquaredTo(target);
        totalScore17 = distance17 + remainingDistance17;
        location19 = location4.add(Direction.NORTHWEST);
        distance19 = 1_000_000.0;
        remainingDistance19 = location19.distanceSquaredTo(target);
        totalScore19 = distance19 + remainingDistance19;
        location20 = location4.add(Direction.NORTHEAST);
        distance20 = 1_000_000.0;
        remainingDistance20 = location20.distanceSquaredTo(target);
        totalScore20 = distance20 + remainingDistance20;
        location21 = location5.add(Direction.SOUTHWEST);
        distance21 = 1_000_000.0;
        remainingDistance21 = location21.distanceSquaredTo(target);
        totalScore21 = distance21 + remainingDistance21;
        location22 = location6.add(Direction.NORTHWEST);
        distance22 = 1_000_000.0;
        remainingDistance22 = location22.distanceSquaredTo(target);
        totalScore22 = distance22 + remainingDistance22;
        location23 = location7.add(Direction.SOUTHEAST);
        distance23 = 1_000_000.0;
        remainingDistance23 = location23.distanceSquaredTo(target);
        totalScore23 = distance23 + remainingDistance23;
        location24 = location8.add(Direction.NORTHEAST);
        distance24 = 1_000_000.0;
        remainingDistance24 = location24.distanceSquaredTo(target);
        totalScore24 = distance24 + remainingDistance24;
        location25 = location9.add(Direction.WEST);
        distance25 = 1_000_000.0;
        remainingDistance25 = location25.distanceSquaredTo(target);
        totalScore25 = distance25 + remainingDistance25;
        location30 = location12.add(Direction.EAST);
        distance30 = 1_000_000.0;
        remainingDistance30 = location30.distanceSquaredTo(target);
        totalScore30 = distance30 + remainingDistance30;
        location35 = location15.add(Direction.SOUTH);
        distance35 = 1_000_000.0;
        remainingDistance35 = location35.distanceSquaredTo(target);
        totalScore35 = distance35 + remainingDistance35;
        location40 = location18.add(Direction.NORTH);
        distance40 = 1_000_000.0;
        remainingDistance40 = location40.distanceSquaredTo(target);
        totalScore40 = distance40 + remainingDistance40;
        location26 = location9.add(Direction.SOUTHWEST);
        distance26 = 1_000_000.0;
        remainingDistance26 = location26.distanceSquaredTo(target);
        totalScore26 = distance26 + remainingDistance26;
        location27 = location9.add(Direction.NORTHWEST);
        distance27 = 1_000_000.0;
        remainingDistance27 = location27.distanceSquaredTo(target);
        totalScore27 = distance27 + remainingDistance27;
        location31 = location12.add(Direction.SOUTHEAST);
        distance31 = 1_000_000.0;
        remainingDistance31 = location31.distanceSquaredTo(target);
        totalScore31 = distance31 + remainingDistance31;
        location32 = location12.add(Direction.NORTHEAST);
        distance32 = 1_000_000.0;
        remainingDistance32 = location32.distanceSquaredTo(target);
        totalScore32 = distance32 + remainingDistance32;
        location36 = location15.add(Direction.SOUTHWEST);
        distance36 = 1_000_000.0;
        remainingDistance36 = location36.distanceSquaredTo(target);
        totalScore36 = distance36 + remainingDistance36;
        location37 = location15.add(Direction.SOUTHEAST);
        distance37 = 1_000_000.0;
        remainingDistance37 = location37.distanceSquaredTo(target);
        totalScore37 = distance37 + remainingDistance37;
        location41 = location18.add(Direction.NORTHWEST);
        distance41 = 1_000_000.0;
        remainingDistance41 = location41.distanceSquaredTo(target);
        totalScore41 = distance41 + remainingDistance41;
        location42 = location18.add(Direction.NORTHEAST);
        distance42 = 1_000_000.0;
        remainingDistance42 = location42.distanceSquaredTo(target);
        totalScore42 = distance42 + remainingDistance42;
        location28 = location10.add(Direction.SOUTHWEST);
        distance28 = 1_000_000.0;
        remainingDistance28 = location28.distanceSquaredTo(target);
        totalScore28 = distance28 + remainingDistance28;
        location29 = location11.add(Direction.NORTHWEST);
        distance29 = 1_000_000.0;
        remainingDistance29 = location29.distanceSquaredTo(target);
        totalScore29 = distance29 + remainingDistance29;
        location33 = location13.add(Direction.SOUTHEAST);
        distance33 = 1_000_000.0;
        remainingDistance33 = location33.distanceSquaredTo(target);
        totalScore33 = distance33 + remainingDistance33;
        location34 = location14.add(Direction.NORTHEAST);
        distance34 = 1_000_000.0;
        remainingDistance34 = location34.distanceSquaredTo(target);
        totalScore34 = distance34 + remainingDistance34;
        location38 = location16.add(Direction.SOUTHWEST);
        distance38 = 1_000_000.0;
        remainingDistance38 = location38.distanceSquaredTo(target);
        totalScore38 = distance38 + remainingDistance38;
        location39 = location17.add(Direction.SOUTHEAST);
        distance39 = 1_000_000.0;
        remainingDistance39 = location39.distanceSquaredTo(target);
        totalScore39 = distance39 + remainingDistance39;
        location43 = location19.add(Direction.NORTHWEST);
        distance43 = 1_000_000.0;
        remainingDistance43 = location43.distanceSquaredTo(target);
        totalScore43 = distance43 + remainingDistance43;
        location44 = location20.add(Direction.NORTHEAST);
        distance44 = 1_000_000.0;
        remainingDistance44 = location44.distanceSquaredTo(target);
        totalScore44 = distance44 + remainingDistance44;
        location49 = location25.add(Direction.WEST);
        distance49 = 1_000_000.0;
        remainingDistance49 = location49.distanceSquaredTo(target);
        totalScore49 = distance49 + remainingDistance49;
        location54 = location30.add(Direction.EAST);
        distance54 = 1_000_000.0;
        remainingDistance54 = location54.distanceSquaredTo(target);
        totalScore54 = distance54 + remainingDistance54;
        location59 = location35.add(Direction.SOUTH);
        distance59 = 1_000_000.0;
        remainingDistance59 = location59.distanceSquaredTo(target);
        totalScore59 = distance59 + remainingDistance59;
        location64 = location40.add(Direction.NORTH);
        distance64 = 1_000_000.0;
        remainingDistance64 = location64.distanceSquaredTo(target);
        totalScore64 = distance64 + remainingDistance64;
        location50 = location25.add(Direction.SOUTHWEST);
        distance50 = 1_000_000.0;
        remainingDistance50 = location50.distanceSquaredTo(target);
        totalScore50 = distance50 + remainingDistance50;
        location51 = location25.add(Direction.NORTHWEST);
        distance51 = 1_000_000.0;
        remainingDistance51 = location51.distanceSquaredTo(target);
        totalScore51 = distance51 + remainingDistance51;
        location55 = location30.add(Direction.SOUTHEAST);
        distance55 = 1_000_000.0;
        remainingDistance55 = location55.distanceSquaredTo(target);
        totalScore55 = distance55 + remainingDistance55;
        location56 = location30.add(Direction.NORTHEAST);
        distance56 = 1_000_000.0;
        remainingDistance56 = location56.distanceSquaredTo(target);
        totalScore56 = distance56 + remainingDistance56;
        location60 = location35.add(Direction.SOUTHWEST);
        distance60 = 1_000_000.0;
        remainingDistance60 = location60.distanceSquaredTo(target);
        totalScore60 = distance60 + remainingDistance60;
        location61 = location35.add(Direction.SOUTHEAST);
        distance61 = 1_000_000.0;
        remainingDistance61 = location61.distanceSquaredTo(target);
        totalScore61 = distance61 + remainingDistance61;
        location65 = location40.add(Direction.NORTHWEST);
        distance65 = 1_000_000.0;
        remainingDistance65 = location65.distanceSquaredTo(target);
        totalScore65 = distance65 + remainingDistance65;
        location66 = location40.add(Direction.NORTHEAST);
        distance66 = 1_000_000.0;
        remainingDistance66 = location66.distanceSquaredTo(target);
        totalScore66 = distance66 + remainingDistance66;
        location45 = location21.add(Direction.SOUTHWEST);
        distance45 = 1_000_000.0;
        remainingDistance45 = location45.distanceSquaredTo(target);
        totalScore45 = distance45 + remainingDistance45;
        location46 = location22.add(Direction.NORTHWEST);
        distance46 = 1_000_000.0;
        remainingDistance46 = location46.distanceSquaredTo(target);
        totalScore46 = distance46 + remainingDistance46;
        location47 = location23.add(Direction.SOUTHEAST);
        distance47 = 1_000_000.0;
        remainingDistance47 = location47.distanceSquaredTo(target);
        totalScore47 = distance47 + remainingDistance47;
        location48 = location24.add(Direction.NORTHEAST);
        distance48 = 1_000_000.0;
        remainingDistance48 = location48.distanceSquaredTo(target);
        totalScore48 = distance48 + remainingDistance48;
        location52 = location26.add(Direction.SOUTHWEST);
        distance52 = 1_000_000.0;
        remainingDistance52 = location52.distanceSquaredTo(target);
        totalScore52 = distance52 + remainingDistance52;
        location53 = location27.add(Direction.NORTHWEST);
        distance53 = 1_000_000.0;
        remainingDistance53 = location53.distanceSquaredTo(target);
        totalScore53 = distance53 + remainingDistance53;
        location57 = location31.add(Direction.SOUTHEAST);
        distance57 = 1_000_000.0;
        remainingDistance57 = location57.distanceSquaredTo(target);
        totalScore57 = distance57 + remainingDistance57;
        location58 = location32.add(Direction.NORTHEAST);
        distance58 = 1_000_000.0;
        remainingDistance58 = location58.distanceSquaredTo(target);
        totalScore58 = distance58 + remainingDistance58;
        location62 = location36.add(Direction.SOUTHWEST);
        distance62 = 1_000_000.0;
        remainingDistance62 = location62.distanceSquaredTo(target);
        totalScore62 = distance62 + remainingDistance62;
        location63 = location37.add(Direction.SOUTHEAST);
        distance63 = 1_000_000.0;
        remainingDistance63 = location63.distanceSquaredTo(target);
        totalScore63 = distance63 + remainingDistance63;
        location67 = location41.add(Direction.NORTHWEST);
        distance67 = 1_000_000.0;
        remainingDistance67 = location67.distanceSquaredTo(target);
        totalScore67 = distance67 + remainingDistance67;
        location68 = location42.add(Direction.NORTHEAST);
        distance68 = 1_000_000.0;
        remainingDistance68 = location68.distanceSquaredTo(target);
        totalScore68 = distance68 + remainingDistance68;

        if (blockedDirection != Direction.WEST && rc.canMove(Direction.WEST)) {
            distance1 = myLocation.distanceSquaredTo(location1);
            direction1 = Direction.WEST;
            totalScore1 = distance1 + remainingDistance1;
        }
        if (blockedDirection != Direction.EAST && rc.canMove(Direction.EAST)) {
            distance2 = myLocation.distanceSquaredTo(location2);
            direction2 = Direction.EAST;
            totalScore2 = distance2 + remainingDistance2;
        }
        if (blockedDirection != Direction.SOUTH && rc.canMove(Direction.SOUTH)) {
            distance3 = myLocation.distanceSquaredTo(location3);
            direction3 = Direction.SOUTH;
            totalScore3 = distance3 + remainingDistance3;
        }
        if (blockedDirection != Direction.NORTH && rc.canMove(Direction.NORTH)) {
            distance4 = myLocation.distanceSquaredTo(location4);
            direction4 = Direction.NORTH;
            totalScore4 = distance4 + remainingDistance4;
        }
        if (blockedDirection != Direction.SOUTHWEST && rc.canMove(Direction.SOUTHWEST)) {
            distance5 = myLocation.distanceSquaredTo(location5);
            direction5 = Direction.SOUTHWEST;
            totalScore5 = distance5 + remainingDistance5;
        }
        if (blockedDirection != Direction.NORTHWEST && rc.canMove(Direction.NORTHWEST)) {
            distance6 = myLocation.distanceSquaredTo(location6);
            direction6 = Direction.NORTHWEST;
            totalScore6 = distance6 + remainingDistance6;
        }
        if (blockedDirection != Direction.SOUTHEAST && rc.canMove(Direction.SOUTHEAST)) {
            distance7 = myLocation.distanceSquaredTo(location7);
            direction7 = Direction.SOUTHEAST;
            totalScore7 = distance7 + remainingDistance7;
        }
        if (blockedDirection != Direction.NORTHEAST && rc.canMove(Direction.NORTHEAST)) {
            distance8 = myLocation.distanceSquaredTo(location8);
            direction8 = Direction.NORTHEAST;
            totalScore8 = distance8 + remainingDistance8;
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                int weight0 = location1.distanceSquaredTo(location9);
                if (distance1 + weight0 < distance9) {
                    distance9 = distance1 + weight0;
                    direction9 = direction1;
                    totalScore9 = distance9 + remainingDistance9;
                }
                int weight1 = location5.distanceSquaredTo(location9);
                if (distance5 + weight1 < distance9) {
                    distance9 = distance5 + weight1;
                    direction9 = direction5;
                    totalScore9 = distance9 + remainingDistance9;
                }
                int weight2 = location6.distanceSquaredTo(location9);
                if (distance6 + weight2 < distance9) {
                    distance9 = distance6 + weight2;
                    direction9 = direction6;
                    totalScore9 = distance9 + remainingDistance9;
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                int weight0 = location2.distanceSquaredTo(location12);
                if (distance2 + weight0 < distance12) {
                    distance12 = distance2 + weight0;
                    direction12 = direction2;
                    totalScore12 = distance12 + remainingDistance12;
                }
                int weight1 = location7.distanceSquaredTo(location12);
                if (distance7 + weight1 < distance12) {
                    distance12 = distance7 + weight1;
                    direction12 = direction7;
                    totalScore12 = distance12 + remainingDistance12;
                }
                int weight2 = location8.distanceSquaredTo(location12);
                if (distance8 + weight2 < distance12) {
                    distance12 = distance8 + weight2;
                    direction12 = direction8;
                    totalScore12 = distance12 + remainingDistance12;
                }
        }
        switch (myY) {
            case 0:
            case 1:
                break;
            default:
                int weight0 = location3.distanceSquaredTo(location15);
                if (distance3 + weight0 < distance15) {
                    distance15 = distance3 + weight0;
                    direction15 = direction3;
                    totalScore15 = distance15 + remainingDistance15;
                }
                int weight1 = location5.distanceSquaredTo(location15);
                if (distance5 + weight1 < distance15) {
                    distance15 = distance5 + weight1;
                    direction15 = direction5;
                    totalScore15 = distance15 + remainingDistance15;
                }
                int weight2 = location7.distanceSquaredTo(location15);
                if (distance7 + weight2 < distance15) {
                    distance15 = distance7 + weight2;
                    direction15 = direction7;
                    totalScore15 = distance15 + remainingDistance15;
                }
        }
        switch (yOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                int weight0 = location4.distanceSquaredTo(location18);
                if (distance4 + weight0 < distance18) {
                    distance18 = distance4 + weight0;
                    direction18 = direction4;
                    totalScore18 = distance18 + remainingDistance18;
                }
                int weight1 = location6.distanceSquaredTo(location18);
                if (distance6 + weight1 < distance18) {
                    distance18 = distance6 + weight1;
                    direction18 = direction6;
                    totalScore18 = distance18 + remainingDistance18;
                }
                int weight2 = location8.distanceSquaredTo(location18);
                if (distance8 + weight2 < distance18) {
                    distance18 = distance8 + weight2;
                    direction18 = direction8;
                    totalScore18 = distance18 + remainingDistance18;
                }
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                switch (myY) {
                    case 0:
                        break;
                    default:
                        int weight0 = location5.distanceSquaredTo(location10);
                        if (distance5 + weight0 < distance10) {
                            distance10 = distance5 + weight0;
                            direction10 = direction5;
                            totalScore10 = distance10 + remainingDistance10;
                        }
                        int weight1 = location9.distanceSquaredTo(location10);
                        if (distance9 + weight1 < distance10) {
                            distance10 = distance9 + weight1;
                            direction10 = direction9;
                            totalScore10 = distance10 + remainingDistance10;
                        }
                        int weight2 = location1.distanceSquaredTo(location10);
                        if (distance1 + weight2 < distance10) {
                            distance10 = distance1 + weight2;
                            direction10 = direction1;
                            totalScore10 = distance10 + remainingDistance10;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                        break;
                    default:
                        int weight0 = location6.distanceSquaredTo(location11);
                        if (distance6 + weight0 < distance11) {
                            distance11 = distance6 + weight0;
                            direction11 = direction6;
                            totalScore11 = distance11 + remainingDistance11;
                        }
                        int weight1 = location9.distanceSquaredTo(location11);
                        if (distance9 + weight1 < distance11) {
                            distance11 = distance9 + weight1;
                            direction11 = direction9;
                            totalScore11 = distance11 + remainingDistance11;
                        }
                        int weight2 = location1.distanceSquaredTo(location11);
                        if (distance1 + weight2 < distance11) {
                            distance11 = distance1 + weight2;
                            direction11 = direction1;
                            totalScore11 = distance11 + remainingDistance11;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (myY) {
                    case 0:
                        break;
                    default:
                        int weight0 = location7.distanceSquaredTo(location13);
                        if (distance7 + weight0 < distance13) {
                            distance13 = distance7 + weight0;
                            direction13 = direction7;
                            totalScore13 = distance13 + remainingDistance13;
                        }
                        int weight1 = location12.distanceSquaredTo(location13);
                        if (distance12 + weight1 < distance13) {
                            distance13 = distance12 + weight1;
                            direction13 = direction12;
                            totalScore13 = distance13 + remainingDistance13;
                        }
                        int weight2 = location2.distanceSquaredTo(location13);
                        if (distance2 + weight2 < distance13) {
                            distance13 = distance2 + weight2;
                            direction13 = direction2;
                            totalScore13 = distance13 + remainingDistance13;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                        break;
                    default:
                        int weight0 = location8.distanceSquaredTo(location14);
                        if (distance8 + weight0 < distance14) {
                            distance14 = distance8 + weight0;
                            direction14 = direction8;
                            totalScore14 = distance14 + remainingDistance14;
                        }
                        int weight1 = location12.distanceSquaredTo(location14);
                        if (distance12 + weight1 < distance14) {
                            distance14 = distance12 + weight1;
                            direction14 = direction12;
                            totalScore14 = distance14 + remainingDistance14;
                        }
                        int weight2 = location2.distanceSquaredTo(location14);
                        if (distance2 + weight2 < distance14) {
                            distance14 = distance2 + weight2;
                            direction14 = direction2;
                            totalScore14 = distance14 + remainingDistance14;
                        }
                }
        }
        switch (myX) {
            case 0:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                        break;
                    default:
                        int weight0 = location15.distanceSquaredTo(location16);
                        if (distance15 + weight0 < distance16) {
                            distance16 = distance15 + weight0;
                            direction16 = direction15;
                            totalScore16 = distance16 + remainingDistance16;
                        }
                        int weight1 = location5.distanceSquaredTo(location16);
                        if (distance5 + weight1 < distance16) {
                            distance16 = distance5 + weight1;
                            direction16 = direction5;
                            totalScore16 = distance16 + remainingDistance16;
                        }
                        int weight2 = location3.distanceSquaredTo(location16);
                        if (distance3 + weight2 < distance16) {
                            distance16 = distance3 + weight2;
                            direction16 = direction3;
                            totalScore16 = distance16 + remainingDistance16;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                        break;
                    default:
                        int weight0 = location15.distanceSquaredTo(location17);
                        if (distance15 + weight0 < distance17) {
                            distance17 = distance15 + weight0;
                            direction17 = direction15;
                            totalScore17 = distance17 + remainingDistance17;
                        }
                        int weight1 = location7.distanceSquaredTo(location17);
                        if (distance7 + weight1 < distance17) {
                            distance17 = distance7 + weight1;
                            direction17 = direction7;
                            totalScore17 = distance17 + remainingDistance17;
                        }
                        int weight2 = location3.distanceSquaredTo(location17);
                        if (distance3 + weight2 < distance17) {
                            distance17 = distance3 + weight2;
                            direction17 = direction3;
                            totalScore17 = distance17 + remainingDistance17;
                        }
                }
        }
        switch (myX) {
            case 0:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        int weight0 = location18.distanceSquaredTo(location19);
                        if (distance18 + weight0 < distance19) {
                            distance19 = distance18 + weight0;
                            direction19 = direction18;
                            totalScore19 = distance19 + remainingDistance19;
                        }
                        int weight1 = location6.distanceSquaredTo(location19);
                        if (distance6 + weight1 < distance19) {
                            distance19 = distance6 + weight1;
                            direction19 = direction6;
                            totalScore19 = distance19 + remainingDistance19;
                        }
                        int weight2 = location4.distanceSquaredTo(location19);
                        if (distance4 + weight2 < distance19) {
                            distance19 = distance4 + weight2;
                            direction19 = direction4;
                            totalScore19 = distance19 + remainingDistance19;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        int weight0 = location18.distanceSquaredTo(location20);
                        if (distance18 + weight0 < distance20) {
                            distance20 = distance18 + weight0;
                            direction20 = direction18;
                            totalScore20 = distance20 + remainingDistance20;
                        }
                        int weight1 = location8.distanceSquaredTo(location20);
                        if (distance8 + weight1 < distance20) {
                            distance20 = distance8 + weight1;
                            direction20 = direction8;
                            totalScore20 = distance20 + remainingDistance20;
                        }
                        int weight2 = location4.distanceSquaredTo(location20);
                        if (distance4 + weight2 < distance20) {
                            distance20 = distance4 + weight2;
                            direction20 = direction4;
                            totalScore20 = distance20 + remainingDistance20;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                        break;
                    default:
                        int weight0 = location16.distanceSquaredTo(location21);
                        if (distance16 + weight0 < distance21) {
                            distance21 = distance16 + weight0;
                            direction21 = direction16;
                            totalScore21 = distance21 + remainingDistance21;
                        }
                        int weight1 = location10.distanceSquaredTo(location21);
                        if (distance10 + weight1 < distance21) {
                            distance21 = distance10 + weight1;
                            direction21 = direction10;
                            totalScore21 = distance21 + remainingDistance21;
                        }
                        int weight2 = location5.distanceSquaredTo(location21);
                        if (distance5 + weight2 < distance21) {
                            distance21 = distance5 + weight2;
                            direction21 = direction5;
                            totalScore21 = distance21 + remainingDistance21;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        int weight0 = location19.distanceSquaredTo(location22);
                        if (distance19 + weight0 < distance22) {
                            distance22 = distance19 + weight0;
                            direction22 = direction19;
                            totalScore22 = distance22 + remainingDistance22;
                        }
                        int weight1 = location11.distanceSquaredTo(location22);
                        if (distance11 + weight1 < distance22) {
                            distance22 = distance11 + weight1;
                            direction22 = direction11;
                            totalScore22 = distance22 + remainingDistance22;
                        }
                        int weight2 = location6.distanceSquaredTo(location22);
                        if (distance6 + weight2 < distance22) {
                            distance22 = distance6 + weight2;
                            direction22 = direction6;
                            totalScore22 = distance22 + remainingDistance22;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                        break;
                    default:
                        int weight0 = location17.distanceSquaredTo(location23);
                        if (distance17 + weight0 < distance23) {
                            distance23 = distance17 + weight0;
                            direction23 = direction17;
                            totalScore23 = distance23 + remainingDistance23;
                        }
                        int weight1 = location13.distanceSquaredTo(location23);
                        if (distance13 + weight1 < distance23) {
                            distance23 = distance13 + weight1;
                            direction23 = direction13;
                            totalScore23 = distance23 + remainingDistance23;
                        }
                        int weight2 = location7.distanceSquaredTo(location23);
                        if (distance7 + weight2 < distance23) {
                            distance23 = distance7 + weight2;
                            direction23 = direction7;
                            totalScore23 = distance23 + remainingDistance23;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        int weight0 = location20.distanceSquaredTo(location24);
                        if (distance20 + weight0 < distance24) {
                            distance24 = distance20 + weight0;
                            direction24 = direction20;
                            totalScore24 = distance24 + remainingDistance24;
                        }
                        int weight1 = location14.distanceSquaredTo(location24);
                        if (distance14 + weight1 < distance24) {
                            distance24 = distance14 + weight1;
                            direction24 = direction14;
                            totalScore24 = distance24 + remainingDistance24;
                        }
                        int weight2 = location8.distanceSquaredTo(location24);
                        if (distance8 + weight2 < distance24) {
                            distance24 = distance8 + weight2;
                            direction24 = direction8;
                            totalScore24 = distance24 + remainingDistance24;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                int weight0 = location9.distanceSquaredTo(location25);
                if (distance9 + weight0 < distance25) {
                    distance25 = distance9 + weight0;
                    direction25 = direction9;
                    totalScore25 = distance25 + remainingDistance25;
                }
                int weight1 = location10.distanceSquaredTo(location25);
                if (distance10 + weight1 < distance25) {
                    distance25 = distance10 + weight1;
                    direction25 = direction10;
                    totalScore25 = distance25 + remainingDistance25;
                }
                int weight2 = location11.distanceSquaredTo(location25);
                if (distance11 + weight2 < distance25) {
                    distance25 = distance11 + weight2;
                    direction25 = direction11;
                    totalScore25 = distance25 + remainingDistance25;
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                int weight0 = location12.distanceSquaredTo(location30);
                if (distance12 + weight0 < distance30) {
                    distance30 = distance12 + weight0;
                    direction30 = direction12;
                    totalScore30 = distance30 + remainingDistance30;
                }
                int weight1 = location13.distanceSquaredTo(location30);
                if (distance13 + weight1 < distance30) {
                    distance30 = distance13 + weight1;
                    direction30 = direction13;
                    totalScore30 = distance30 + remainingDistance30;
                }
                int weight2 = location14.distanceSquaredTo(location30);
                if (distance14 + weight2 < distance30) {
                    distance30 = distance14 + weight2;
                    direction30 = direction14;
                    totalScore30 = distance30 + remainingDistance30;
                }
        }
        switch (myY) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                int weight0 = location15.distanceSquaredTo(location35);
                if (distance15 + weight0 < distance35) {
                    distance35 = distance15 + weight0;
                    direction35 = direction15;
                    totalScore35 = distance35 + remainingDistance35;
                }
                int weight1 = location16.distanceSquaredTo(location35);
                if (distance16 + weight1 < distance35) {
                    distance35 = distance16 + weight1;
                    direction35 = direction16;
                    totalScore35 = distance35 + remainingDistance35;
                }
                int weight2 = location17.distanceSquaredTo(location35);
                if (distance17 + weight2 < distance35) {
                    distance35 = distance17 + weight2;
                    direction35 = direction17;
                    totalScore35 = distance35 + remainingDistance35;
                }
        }
        switch (yOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                int weight0 = location18.distanceSquaredTo(location40);
                if (distance18 + weight0 < distance40) {
                    distance40 = distance18 + weight0;
                    direction40 = direction18;
                    totalScore40 = distance40 + remainingDistance40;
                }
                int weight1 = location19.distanceSquaredTo(location40);
                if (distance19 + weight1 < distance40) {
                    distance40 = distance19 + weight1;
                    direction40 = direction19;
                    totalScore40 = distance40 + remainingDistance40;
                }
                int weight2 = location20.distanceSquaredTo(location40);
                if (distance20 + weight2 < distance40) {
                    distance40 = distance20 + weight2;
                    direction40 = direction20;
                    totalScore40 = distance40 + remainingDistance40;
                }
        }
        switch (myX) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (myY) {
                    case 0:
                        break;
                    default:
                        int weight0 = location10.distanceSquaredTo(location26);
                        if (distance10 + weight0 < distance26) {
                            distance26 = distance10 + weight0;
                            direction26 = direction10;
                            totalScore26 = distance26 + remainingDistance26;
                        }
                        int weight1 = location25.distanceSquaredTo(location26);
                        if (distance25 + weight1 < distance26) {
                            distance26 = distance25 + weight1;
                            direction26 = direction25;
                            totalScore26 = distance26 + remainingDistance26;
                        }
                        int weight2 = location21.distanceSquaredTo(location26);
                        if (distance21 + weight2 < distance26) {
                            distance26 = distance21 + weight2;
                            direction26 = direction21;
                            totalScore26 = distance26 + remainingDistance26;
                        }
                        int weight3 = location9.distanceSquaredTo(location26);
                        if (distance9 + weight3 < distance26) {
                            distance26 = distance9 + weight3;
                            direction26 = direction9;
                            totalScore26 = distance26 + remainingDistance26;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                        break;
                    default:
                        int weight0 = location11.distanceSquaredTo(location27);
                        if (distance11 + weight0 < distance27) {
                            distance27 = distance11 + weight0;
                            direction27 = direction11;
                            totalScore27 = distance27 + remainingDistance27;
                        }
                        int weight1 = location25.distanceSquaredTo(location27);
                        if (distance25 + weight1 < distance27) {
                            distance27 = distance25 + weight1;
                            direction27 = direction25;
                            totalScore27 = distance27 + remainingDistance27;
                        }
                        int weight2 = location9.distanceSquaredTo(location27);
                        if (distance9 + weight2 < distance27) {
                            distance27 = distance9 + weight2;
                            direction27 = direction9;
                            totalScore27 = distance27 + remainingDistance27;
                        }
                        int weight3 = location22.distanceSquaredTo(location27);
                        if (distance22 + weight3 < distance27) {
                            distance27 = distance22 + weight3;
                            direction27 = direction22;
                            totalScore27 = distance27 + remainingDistance27;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                switch (myY) {
                    case 0:
                        break;
                    default:
                        int weight0 = location13.distanceSquaredTo(location31);
                        if (distance13 + weight0 < distance31) {
                            distance31 = distance13 + weight0;
                            direction31 = direction13;
                            totalScore31 = distance31 + remainingDistance31;
                        }
                        int weight1 = location30.distanceSquaredTo(location31);
                        if (distance30 + weight1 < distance31) {
                            distance31 = distance30 + weight1;
                            direction31 = direction30;
                            totalScore31 = distance31 + remainingDistance31;
                        }
                        int weight2 = location23.distanceSquaredTo(location31);
                        if (distance23 + weight2 < distance31) {
                            distance31 = distance23 + weight2;
                            direction31 = direction23;
                            totalScore31 = distance31 + remainingDistance31;
                        }
                        int weight3 = location12.distanceSquaredTo(location31);
                        if (distance12 + weight3 < distance31) {
                            distance31 = distance12 + weight3;
                            direction31 = direction12;
                            totalScore31 = distance31 + remainingDistance31;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                        break;
                    default:
                        int weight0 = location14.distanceSquaredTo(location32);
                        if (distance14 + weight0 < distance32) {
                            distance32 = distance14 + weight0;
                            direction32 = direction14;
                            totalScore32 = distance32 + remainingDistance32;
                        }
                        int weight1 = location30.distanceSquaredTo(location32);
                        if (distance30 + weight1 < distance32) {
                            distance32 = distance30 + weight1;
                            direction32 = direction30;
                            totalScore32 = distance32 + remainingDistance32;
                        }
                        int weight2 = location12.distanceSquaredTo(location32);
                        if (distance12 + weight2 < distance32) {
                            distance32 = distance12 + weight2;
                            direction32 = direction12;
                            totalScore32 = distance32 + remainingDistance32;
                        }
                        int weight3 = location24.distanceSquaredTo(location32);
                        if (distance24 + weight3 < distance32) {
                            distance32 = distance24 + weight3;
                            direction32 = direction24;
                            totalScore32 = distance32 + remainingDistance32;
                        }
                }
        }
        switch (myX) {
            case 0:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        int weight0 = location35.distanceSquaredTo(location36);
                        if (distance35 + weight0 < distance36) {
                            distance36 = distance35 + weight0;
                            direction36 = direction35;
                            totalScore36 = distance36 + remainingDistance36;
                        }
                        int weight1 = location16.distanceSquaredTo(location36);
                        if (distance16 + weight1 < distance36) {
                            distance36 = distance16 + weight1;
                            direction36 = direction16;
                            totalScore36 = distance36 + remainingDistance36;
                        }
                        int weight2 = location21.distanceSquaredTo(location36);
                        if (distance21 + weight2 < distance36) {
                            distance36 = distance21 + weight2;
                            direction36 = direction21;
                            totalScore36 = distance36 + remainingDistance36;
                        }
                        int weight3 = location15.distanceSquaredTo(location36);
                        if (distance15 + weight3 < distance36) {
                            distance36 = distance15 + weight3;
                            direction36 = direction15;
                            totalScore36 = distance36 + remainingDistance36;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        int weight0 = location35.distanceSquaredTo(location37);
                        if (distance35 + weight0 < distance37) {
                            distance37 = distance35 + weight0;
                            direction37 = direction35;
                            totalScore37 = distance37 + remainingDistance37;
                        }
                        int weight1 = location17.distanceSquaredTo(location37);
                        if (distance17 + weight1 < distance37) {
                            distance37 = distance17 + weight1;
                            direction37 = direction17;
                            totalScore37 = distance37 + remainingDistance37;
                        }
                        int weight2 = location15.distanceSquaredTo(location37);
                        if (distance15 + weight2 < distance37) {
                            distance37 = distance15 + weight2;
                            direction37 = direction15;
                            totalScore37 = distance37 + remainingDistance37;
                        }
                        int weight3 = location23.distanceSquaredTo(location37);
                        if (distance23 + weight3 < distance37) {
                            distance37 = distance23 + weight3;
                            direction37 = direction23;
                            totalScore37 = distance37 + remainingDistance37;
                        }
                }
        }
        switch (myX) {
            case 0:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    default:
                        int weight0 = location40.distanceSquaredTo(location41);
                        if (distance40 + weight0 < distance41) {
                            distance41 = distance40 + weight0;
                            direction41 = direction40;
                            totalScore41 = distance41 + remainingDistance41;
                        }
                        int weight1 = location19.distanceSquaredTo(location41);
                        if (distance19 + weight1 < distance41) {
                            distance41 = distance19 + weight1;
                            direction41 = direction19;
                            totalScore41 = distance41 + remainingDistance41;
                        }
                        int weight2 = location22.distanceSquaredTo(location41);
                        if (distance22 + weight2 < distance41) {
                            distance41 = distance22 + weight2;
                            direction41 = direction22;
                            totalScore41 = distance41 + remainingDistance41;
                        }
                        int weight3 = location18.distanceSquaredTo(location41);
                        if (distance18 + weight3 < distance41) {
                            distance41 = distance18 + weight3;
                            direction41 = direction18;
                            totalScore41 = distance41 + remainingDistance41;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    default:
                        int weight0 = location40.distanceSquaredTo(location42);
                        if (distance40 + weight0 < distance42) {
                            distance42 = distance40 + weight0;
                            direction42 = direction40;
                            totalScore42 = distance42 + remainingDistance42;
                        }
                        int weight1 = location20.distanceSquaredTo(location42);
                        if (distance20 + weight1 < distance42) {
                            distance42 = distance20 + weight1;
                            direction42 = direction20;
                            totalScore42 = distance42 + remainingDistance42;
                        }
                        int weight2 = location18.distanceSquaredTo(location42);
                        if (distance18 + weight2 < distance42) {
                            distance42 = distance18 + weight2;
                            direction42 = direction18;
                            totalScore42 = distance42 + remainingDistance42;
                        }
                        int weight3 = location24.distanceSquaredTo(location42);
                        if (distance24 + weight3 < distance42) {
                            distance42 = distance24 + weight3;
                            direction42 = direction24;
                            totalScore42 = distance42 + remainingDistance42;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                        break;
                    default:
                        int weight0 = location21.distanceSquaredTo(location28);
                        if (distance21 + weight0 < distance28) {
                            distance28 = distance21 + weight0;
                            direction28 = direction21;
                            totalScore28 = distance28 + remainingDistance28;
                        }
                        int weight1 = location26.distanceSquaredTo(location28);
                        if (distance26 + weight1 < distance28) {
                            distance28 = distance26 + weight1;
                            direction28 = direction26;
                            totalScore28 = distance28 + remainingDistance28;
                        }
                        int weight2 = location10.distanceSquaredTo(location28);
                        if (distance10 + weight2 < distance28) {
                            distance28 = distance10 + weight2;
                            direction28 = direction10;
                            totalScore28 = distance28 + remainingDistance28;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        int weight0 = location22.distanceSquaredTo(location29);
                        if (distance22 + weight0 < distance29) {
                            distance29 = distance22 + weight0;
                            direction29 = direction22;
                            totalScore29 = distance29 + remainingDistance29;
                        }
                        int weight1 = location27.distanceSquaredTo(location29);
                        if (distance27 + weight1 < distance29) {
                            distance29 = distance27 + weight1;
                            direction29 = direction27;
                            totalScore29 = distance29 + remainingDistance29;
                        }
                        int weight2 = location11.distanceSquaredTo(location29);
                        if (distance11 + weight2 < distance29) {
                            distance29 = distance11 + weight2;
                            direction29 = direction11;
                            totalScore29 = distance29 + remainingDistance29;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                        break;
                    default:
                        int weight0 = location23.distanceSquaredTo(location33);
                        if (distance23 + weight0 < distance33) {
                            distance33 = distance23 + weight0;
                            direction33 = direction23;
                            totalScore33 = distance33 + remainingDistance33;
                        }
                        int weight1 = location31.distanceSquaredTo(location33);
                        if (distance31 + weight1 < distance33) {
                            distance33 = distance31 + weight1;
                            direction33 = direction31;
                            totalScore33 = distance33 + remainingDistance33;
                        }
                        int weight2 = location13.distanceSquaredTo(location33);
                        if (distance13 + weight2 < distance33) {
                            distance33 = distance13 + weight2;
                            direction33 = direction13;
                            totalScore33 = distance33 + remainingDistance33;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        int weight0 = location24.distanceSquaredTo(location34);
                        if (distance24 + weight0 < distance34) {
                            distance34 = distance24 + weight0;
                            direction34 = direction24;
                            totalScore34 = distance34 + remainingDistance34;
                        }
                        int weight1 = location32.distanceSquaredTo(location34);
                        if (distance32 + weight1 < distance34) {
                            distance34 = distance32 + weight1;
                            direction34 = direction32;
                            totalScore34 = distance34 + remainingDistance34;
                        }
                        int weight2 = location14.distanceSquaredTo(location34);
                        if (distance14 + weight2 < distance34) {
                            distance34 = distance14 + weight2;
                            direction34 = direction14;
                            totalScore34 = distance34 + remainingDistance34;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        int weight0 = location36.distanceSquaredTo(location38);
                        if (distance36 + weight0 < distance38) {
                            distance38 = distance36 + weight0;
                            direction38 = direction36;
                            totalScore38 = distance38 + remainingDistance38;
                        }
                        int weight1 = location21.distanceSquaredTo(location38);
                        if (distance21 + weight1 < distance38) {
                            distance38 = distance21 + weight1;
                            direction38 = direction21;
                            totalScore38 = distance38 + remainingDistance38;
                        }
                        int weight2 = location16.distanceSquaredTo(location38);
                        if (distance16 + weight2 < distance38) {
                            distance38 = distance16 + weight2;
                            direction38 = direction16;
                            totalScore38 = distance38 + remainingDistance38;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        int weight0 = location37.distanceSquaredTo(location39);
                        if (distance37 + weight0 < distance39) {
                            distance39 = distance37 + weight0;
                            direction39 = direction37;
                            totalScore39 = distance39 + remainingDistance39;
                        }
                        int weight1 = location23.distanceSquaredTo(location39);
                        if (distance23 + weight1 < distance39) {
                            distance39 = distance23 + weight1;
                            direction39 = direction23;
                            totalScore39 = distance39 + remainingDistance39;
                        }
                        int weight2 = location17.distanceSquaredTo(location39);
                        if (distance17 + weight2 < distance39) {
                            distance39 = distance17 + weight2;
                            direction39 = direction17;
                            totalScore39 = distance39 + remainingDistance39;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    default:
                        int weight0 = location41.distanceSquaredTo(location43);
                        if (distance41 + weight0 < distance43) {
                            distance43 = distance41 + weight0;
                            direction43 = direction41;
                            totalScore43 = distance43 + remainingDistance43;
                        }
                        int weight1 = location22.distanceSquaredTo(location43);
                        if (distance22 + weight1 < distance43) {
                            distance43 = distance22 + weight1;
                            direction43 = direction22;
                            totalScore43 = distance43 + remainingDistance43;
                        }
                        int weight2 = location19.distanceSquaredTo(location43);
                        if (distance19 + weight2 < distance43) {
                            distance43 = distance19 + weight2;
                            direction43 = direction19;
                            totalScore43 = distance43 + remainingDistance43;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    default:
                        int weight0 = location42.distanceSquaredTo(location44);
                        if (distance42 + weight0 < distance44) {
                            distance44 = distance42 + weight0;
                            direction44 = direction42;
                            totalScore44 = distance44 + remainingDistance44;
                        }
                        int weight1 = location24.distanceSquaredTo(location44);
                        if (distance24 + weight1 < distance44) {
                            distance44 = distance24 + weight1;
                            direction44 = direction24;
                            totalScore44 = distance44 + remainingDistance44;
                        }
                        int weight2 = location20.distanceSquaredTo(location44);
                        if (distance20 + weight2 < distance44) {
                            distance44 = distance20 + weight2;
                            direction44 = direction20;
                            totalScore44 = distance44 + remainingDistance44;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                int weight0 = location25.distanceSquaredTo(location49);
                if (distance25 + weight0 < distance49) {
                    distance49 = distance25 + weight0;
                    direction49 = direction25;
                    totalScore49 = distance49 + remainingDistance49;
                }
                int weight1 = location26.distanceSquaredTo(location49);
                if (distance26 + weight1 < distance49) {
                    distance49 = distance26 + weight1;
                    direction49 = direction26;
                    totalScore49 = distance49 + remainingDistance49;
                }
                int weight2 = location27.distanceSquaredTo(location49);
                if (distance27 + weight2 < distance49) {
                    distance49 = distance27 + weight2;
                    direction49 = direction27;
                    totalScore49 = distance49 + remainingDistance49;
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            default:
                int weight0 = location30.distanceSquaredTo(location54);
                if (distance30 + weight0 < distance54) {
                    distance54 = distance30 + weight0;
                    direction54 = direction30;
                    totalScore54 = distance54 + remainingDistance54;
                }
                int weight1 = location31.distanceSquaredTo(location54);
                if (distance31 + weight1 < distance54) {
                    distance54 = distance31 + weight1;
                    direction54 = direction31;
                    totalScore54 = distance54 + remainingDistance54;
                }
                int weight2 = location32.distanceSquaredTo(location54);
                if (distance32 + weight2 < distance54) {
                    distance54 = distance32 + weight2;
                    direction54 = direction32;
                    totalScore54 = distance54 + remainingDistance54;
                }
        }
        switch (myY) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                int weight0 = location35.distanceSquaredTo(location59);
                if (distance35 + weight0 < distance59) {
                    distance59 = distance35 + weight0;
                    direction59 = direction35;
                    totalScore59 = distance59 + remainingDistance59;
                }
                int weight1 = location36.distanceSquaredTo(location59);
                if (distance36 + weight1 < distance59) {
                    distance59 = distance36 + weight1;
                    direction59 = direction36;
                    totalScore59 = distance59 + remainingDistance59;
                }
                int weight2 = location37.distanceSquaredTo(location59);
                if (distance37 + weight2 < distance59) {
                    distance59 = distance37 + weight2;
                    direction59 = direction37;
                    totalScore59 = distance59 + remainingDistance59;
                }
        }
        switch (yOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            default:
                int weight0 = location40.distanceSquaredTo(location64);
                if (distance40 + weight0 < distance64) {
                    distance64 = distance40 + weight0;
                    direction64 = direction40;
                    totalScore64 = distance64 + remainingDistance64;
                }
                int weight1 = location41.distanceSquaredTo(location64);
                if (distance41 + weight1 < distance64) {
                    distance64 = distance41 + weight1;
                    direction64 = direction41;
                    totalScore64 = distance64 + remainingDistance64;
                }
                int weight2 = location42.distanceSquaredTo(location64);
                if (distance42 + weight2 < distance64) {
                    distance64 = distance42 + weight2;
                    direction64 = direction42;
                    totalScore64 = distance64 + remainingDistance64;
                }
        }
        switch (myX) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                switch (myY) {
                    case 0:
                        break;
                    default:
                        int weight0 = location26.distanceSquaredTo(location50);
                        if (distance26 + weight0 < distance50) {
                            distance50 = distance26 + weight0;
                            direction50 = direction26;
                            totalScore50 = distance50 + remainingDistance50;
                        }
                        int weight1 = location49.distanceSquaredTo(location50);
                        if (distance49 + weight1 < distance50) {
                            distance50 = distance49 + weight1;
                            direction50 = direction49;
                            totalScore50 = distance50 + remainingDistance50;
                        }
                        int weight2 = location28.distanceSquaredTo(location50);
                        if (distance28 + weight2 < distance50) {
                            distance50 = distance28 + weight2;
                            direction50 = direction28;
                            totalScore50 = distance50 + remainingDistance50;
                        }
                        int weight3 = location25.distanceSquaredTo(location50);
                        if (distance25 + weight3 < distance50) {
                            distance50 = distance25 + weight3;
                            direction50 = direction25;
                            totalScore50 = distance50 + remainingDistance50;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                        break;
                    default:
                        int weight0 = location27.distanceSquaredTo(location51);
                        if (distance27 + weight0 < distance51) {
                            distance51 = distance27 + weight0;
                            direction51 = direction27;
                            totalScore51 = distance51 + remainingDistance51;
                        }
                        int weight1 = location49.distanceSquaredTo(location51);
                        if (distance49 + weight1 < distance51) {
                            distance51 = distance49 + weight1;
                            direction51 = direction49;
                            totalScore51 = distance51 + remainingDistance51;
                        }
                        int weight2 = location25.distanceSquaredTo(location51);
                        if (distance25 + weight2 < distance51) {
                            distance51 = distance25 + weight2;
                            direction51 = direction25;
                            totalScore51 = distance51 + remainingDistance51;
                        }
                        int weight3 = location29.distanceSquaredTo(location51);
                        if (distance29 + weight3 < distance51) {
                            distance51 = distance29 + weight3;
                            direction51 = direction29;
                            totalScore51 = distance51 + remainingDistance51;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            default:
                switch (myY) {
                    case 0:
                        break;
                    default:
                        int weight0 = location31.distanceSquaredTo(location55);
                        if (distance31 + weight0 < distance55) {
                            distance55 = distance31 + weight0;
                            direction55 = direction31;
                            totalScore55 = distance55 + remainingDistance55;
                        }
                        int weight1 = location54.distanceSquaredTo(location55);
                        if (distance54 + weight1 < distance55) {
                            distance55 = distance54 + weight1;
                            direction55 = direction54;
                            totalScore55 = distance55 + remainingDistance55;
                        }
                        int weight2 = location33.distanceSquaredTo(location55);
                        if (distance33 + weight2 < distance55) {
                            distance55 = distance33 + weight2;
                            direction55 = direction33;
                            totalScore55 = distance55 + remainingDistance55;
                        }
                        int weight3 = location30.distanceSquaredTo(location55);
                        if (distance30 + weight3 < distance55) {
                            distance55 = distance30 + weight3;
                            direction55 = direction30;
                            totalScore55 = distance55 + remainingDistance55;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                        break;
                    default:
                        int weight0 = location32.distanceSquaredTo(location56);
                        if (distance32 + weight0 < distance56) {
                            distance56 = distance32 + weight0;
                            direction56 = direction32;
                            totalScore56 = distance56 + remainingDistance56;
                        }
                        int weight1 = location54.distanceSquaredTo(location56);
                        if (distance54 + weight1 < distance56) {
                            distance56 = distance54 + weight1;
                            direction56 = direction54;
                            totalScore56 = distance56 + remainingDistance56;
                        }
                        int weight2 = location30.distanceSquaredTo(location56);
                        if (distance30 + weight2 < distance56) {
                            distance56 = distance30 + weight2;
                            direction56 = direction30;
                            totalScore56 = distance56 + remainingDistance56;
                        }
                        int weight3 = location34.distanceSquaredTo(location56);
                        if (distance34 + weight3 < distance56) {
                            distance56 = distance34 + weight3;
                            direction56 = direction34;
                            totalScore56 = distance56 + remainingDistance56;
                        }
                }
        }
        switch (myX) {
            case 0:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    default:
                        int weight0 = location59.distanceSquaredTo(location60);
                        if (distance59 + weight0 < distance60) {
                            distance60 = distance59 + weight0;
                            direction60 = direction59;
                            totalScore60 = distance60 + remainingDistance60;
                        }
                        int weight1 = location36.distanceSquaredTo(location60);
                        if (distance36 + weight1 < distance60) {
                            distance60 = distance36 + weight1;
                            direction60 = direction36;
                            totalScore60 = distance60 + remainingDistance60;
                        }
                        int weight2 = location38.distanceSquaredTo(location60);
                        if (distance38 + weight2 < distance60) {
                            distance60 = distance38 + weight2;
                            direction60 = direction38;
                            totalScore60 = distance60 + remainingDistance60;
                        }
                        int weight3 = location35.distanceSquaredTo(location60);
                        if (distance35 + weight3 < distance60) {
                            distance60 = distance35 + weight3;
                            direction60 = direction35;
                            totalScore60 = distance60 + remainingDistance60;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    default:
                        int weight0 = location59.distanceSquaredTo(location61);
                        if (distance59 + weight0 < distance61) {
                            distance61 = distance59 + weight0;
                            direction61 = direction59;
                            totalScore61 = distance61 + remainingDistance61;
                        }
                        int weight1 = location37.distanceSquaredTo(location61);
                        if (distance37 + weight1 < distance61) {
                            distance61 = distance37 + weight1;
                            direction61 = direction37;
                            totalScore61 = distance61 + remainingDistance61;
                        }
                        int weight2 = location35.distanceSquaredTo(location61);
                        if (distance35 + weight2 < distance61) {
                            distance61 = distance35 + weight2;
                            direction61 = direction35;
                            totalScore61 = distance61 + remainingDistance61;
                        }
                        int weight3 = location39.distanceSquaredTo(location61);
                        if (distance39 + weight3 < distance61) {
                            distance61 = distance39 + weight3;
                            direction61 = direction39;
                            totalScore61 = distance61 + remainingDistance61;
                        }
                }
        }
        switch (myX) {
            case 0:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                        break;
                    default:
                        int weight0 = location64.distanceSquaredTo(location65);
                        if (distance64 + weight0 < distance65) {
                            distance65 = distance64 + weight0;
                            direction65 = direction64;
                            totalScore65 = distance65 + remainingDistance65;
                        }
                        int weight1 = location41.distanceSquaredTo(location65);
                        if (distance41 + weight1 < distance65) {
                            distance65 = distance41 + weight1;
                            direction65 = direction41;
                            totalScore65 = distance65 + remainingDistance65;
                        }
                        int weight2 = location43.distanceSquaredTo(location65);
                        if (distance43 + weight2 < distance65) {
                            distance65 = distance43 + weight2;
                            direction65 = direction43;
                            totalScore65 = distance65 + remainingDistance65;
                        }
                        int weight3 = location40.distanceSquaredTo(location65);
                        if (distance40 + weight3 < distance65) {
                            distance65 = distance40 + weight3;
                            direction65 = direction40;
                            totalScore65 = distance65 + remainingDistance65;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                        break;
                    default:
                        int weight0 = location64.distanceSquaredTo(location66);
                        if (distance64 + weight0 < distance66) {
                            distance66 = distance64 + weight0;
                            direction66 = direction64;
                            totalScore66 = distance66 + remainingDistance66;
                        }
                        int weight1 = location42.distanceSquaredTo(location66);
                        if (distance42 + weight1 < distance66) {
                            distance66 = distance42 + weight1;
                            direction66 = direction42;
                            totalScore66 = distance66 + remainingDistance66;
                        }
                        int weight2 = location40.distanceSquaredTo(location66);
                        if (distance40 + weight2 < distance66) {
                            distance66 = distance40 + weight2;
                            direction66 = direction40;
                            totalScore66 = distance66 + remainingDistance66;
                        }
                        int weight3 = location44.distanceSquaredTo(location66);
                        if (distance44 + weight3 < distance66) {
                            distance66 = distance44 + weight3;
                            direction66 = direction44;
                            totalScore66 = distance66 + remainingDistance66;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        int weight0 = location38.distanceSquaredTo(location45);
                        if (distance38 + weight0 < distance45) {
                            distance45 = distance38 + weight0;
                            direction45 = direction38;
                            totalScore45 = distance45 + remainingDistance45;
                        }
                        int weight1 = location28.distanceSquaredTo(location45);
                        if (distance28 + weight1 < distance45) {
                            distance45 = distance28 + weight1;
                            direction45 = direction28;
                            totalScore45 = distance45 + remainingDistance45;
                        }
                        int weight2 = location21.distanceSquaredTo(location45);
                        if (distance21 + weight2 < distance45) {
                            distance45 = distance21 + weight2;
                            direction45 = direction21;
                            totalScore45 = distance45 + remainingDistance45;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    default:
                        int weight0 = location43.distanceSquaredTo(location46);
                        if (distance43 + weight0 < distance46) {
                            distance46 = distance43 + weight0;
                            direction46 = direction43;
                            totalScore46 = distance46 + remainingDistance46;
                        }
                        int weight1 = location29.distanceSquaredTo(location46);
                        if (distance29 + weight1 < distance46) {
                            distance46 = distance29 + weight1;
                            direction46 = direction29;
                            totalScore46 = distance46 + remainingDistance46;
                        }
                        int weight2 = location22.distanceSquaredTo(location46);
                        if (distance22 + weight2 < distance46) {
                            distance46 = distance22 + weight2;
                            direction46 = direction22;
                            totalScore46 = distance46 + remainingDistance46;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        int weight0 = location39.distanceSquaredTo(location47);
                        if (distance39 + weight0 < distance47) {
                            distance47 = distance39 + weight0;
                            direction47 = direction39;
                            totalScore47 = distance47 + remainingDistance47;
                        }
                        int weight1 = location33.distanceSquaredTo(location47);
                        if (distance33 + weight1 < distance47) {
                            distance47 = distance33 + weight1;
                            direction47 = direction33;
                            totalScore47 = distance47 + remainingDistance47;
                        }
                        int weight2 = location23.distanceSquaredTo(location47);
                        if (distance23 + weight2 < distance47) {
                            distance47 = distance23 + weight2;
                            direction47 = direction23;
                            totalScore47 = distance47 + remainingDistance47;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    default:
                        int weight0 = location44.distanceSquaredTo(location48);
                        if (distance44 + weight0 < distance48) {
                            distance48 = distance44 + weight0;
                            direction48 = direction44;
                            totalScore48 = distance48 + remainingDistance48;
                        }
                        int weight1 = location34.distanceSquaredTo(location48);
                        if (distance34 + weight1 < distance48) {
                            distance48 = distance34 + weight1;
                            direction48 = direction34;
                            totalScore48 = distance48 + remainingDistance48;
                        }
                        int weight2 = location24.distanceSquaredTo(location48);
                        if (distance24 + weight2 < distance48) {
                            distance48 = distance24 + weight2;
                            direction48 = direction24;
                            totalScore48 = distance48 + remainingDistance48;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                        break;
                    default:
                        int weight0 = location28.distanceSquaredTo(location52);
                        if (distance28 + weight0 < distance52) {
                            distance52 = distance28 + weight0;
                            direction52 = direction28;
                            totalScore52 = distance52 + remainingDistance52;
                        }
                        int weight1 = location50.distanceSquaredTo(location52);
                        if (distance50 + weight1 < distance52) {
                            distance52 = distance50 + weight1;
                            direction52 = direction50;
                            totalScore52 = distance52 + remainingDistance52;
                        }
                        int weight2 = location45.distanceSquaredTo(location52);
                        if (distance45 + weight2 < distance52) {
                            distance52 = distance45 + weight2;
                            direction52 = direction45;
                            totalScore52 = distance52 + remainingDistance52;
                        }
                        int weight3 = location26.distanceSquaredTo(location52);
                        if (distance26 + weight3 < distance52) {
                            distance52 = distance26 + weight3;
                            direction52 = direction26;
                            totalScore52 = distance52 + remainingDistance52;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        int weight0 = location29.distanceSquaredTo(location53);
                        if (distance29 + weight0 < distance53) {
                            distance53 = distance29 + weight0;
                            direction53 = direction29;
                            totalScore53 = distance53 + remainingDistance53;
                        }
                        int weight1 = location51.distanceSquaredTo(location53);
                        if (distance51 + weight1 < distance53) {
                            distance53 = distance51 + weight1;
                            direction53 = direction51;
                            totalScore53 = distance53 + remainingDistance53;
                        }
                        int weight2 = location27.distanceSquaredTo(location53);
                        if (distance27 + weight2 < distance53) {
                            distance53 = distance27 + weight2;
                            direction53 = direction27;
                            totalScore53 = distance53 + remainingDistance53;
                        }
                        int weight3 = location46.distanceSquaredTo(location53);
                        if (distance46 + weight3 < distance53) {
                            distance53 = distance46 + weight3;
                            direction53 = direction46;
                            totalScore53 = distance53 + remainingDistance53;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                        break;
                    default:
                        int weight0 = location33.distanceSquaredTo(location57);
                        if (distance33 + weight0 < distance57) {
                            distance57 = distance33 + weight0;
                            direction57 = direction33;
                            totalScore57 = distance57 + remainingDistance57;
                        }
                        int weight1 = location55.distanceSquaredTo(location57);
                        if (distance55 + weight1 < distance57) {
                            distance57 = distance55 + weight1;
                            direction57 = direction55;
                            totalScore57 = distance57 + remainingDistance57;
                        }
                        int weight2 = location47.distanceSquaredTo(location57);
                        if (distance47 + weight2 < distance57) {
                            distance57 = distance47 + weight2;
                            direction57 = direction47;
                            totalScore57 = distance57 + remainingDistance57;
                        }
                        int weight3 = location31.distanceSquaredTo(location57);
                        if (distance31 + weight3 < distance57) {
                            distance57 = distance31 + weight3;
                            direction57 = direction31;
                            totalScore57 = distance57 + remainingDistance57;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        int weight0 = location34.distanceSquaredTo(location58);
                        if (distance34 + weight0 < distance58) {
                            distance58 = distance34 + weight0;
                            direction58 = direction34;
                            totalScore58 = distance58 + remainingDistance58;
                        }
                        int weight1 = location56.distanceSquaredTo(location58);
                        if (distance56 + weight1 < distance58) {
                            distance58 = distance56 + weight1;
                            direction58 = direction56;
                            totalScore58 = distance58 + remainingDistance58;
                        }
                        int weight2 = location32.distanceSquaredTo(location58);
                        if (distance32 + weight2 < distance58) {
                            distance58 = distance32 + weight2;
                            direction58 = direction32;
                            totalScore58 = distance58 + remainingDistance58;
                        }
                        int weight3 = location48.distanceSquaredTo(location58);
                        if (distance48 + weight3 < distance58) {
                            distance58 = distance48 + weight3;
                            direction58 = direction48;
                            totalScore58 = distance58 + remainingDistance58;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    default:
                        int weight0 = location60.distanceSquaredTo(location62);
                        if (distance60 + weight0 < distance62) {
                            distance62 = distance60 + weight0;
                            direction62 = direction60;
                            totalScore62 = distance62 + remainingDistance62;
                        }
                        int weight1 = location38.distanceSquaredTo(location62);
                        if (distance38 + weight1 < distance62) {
                            distance62 = distance38 + weight1;
                            direction62 = direction38;
                            totalScore62 = distance62 + remainingDistance62;
                        }
                        int weight2 = location45.distanceSquaredTo(location62);
                        if (distance45 + weight2 < distance62) {
                            distance62 = distance45 + weight2;
                            direction62 = direction45;
                            totalScore62 = distance62 + remainingDistance62;
                        }
                        int weight3 = location36.distanceSquaredTo(location62);
                        if (distance36 + weight3 < distance62) {
                            distance62 = distance36 + weight3;
                            direction62 = direction36;
                            totalScore62 = distance62 + remainingDistance62;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    default:
                        int weight0 = location61.distanceSquaredTo(location63);
                        if (distance61 + weight0 < distance63) {
                            distance63 = distance61 + weight0;
                            direction63 = direction61;
                            totalScore63 = distance63 + remainingDistance63;
                        }
                        int weight1 = location39.distanceSquaredTo(location63);
                        if (distance39 + weight1 < distance63) {
                            distance63 = distance39 + weight1;
                            direction63 = direction39;
                            totalScore63 = distance63 + remainingDistance63;
                        }
                        int weight2 = location37.distanceSquaredTo(location63);
                        if (distance37 + weight2 < distance63) {
                            distance63 = distance37 + weight2;
                            direction63 = direction37;
                            totalScore63 = distance63 + remainingDistance63;
                        }
                        int weight3 = location47.distanceSquaredTo(location63);
                        if (distance47 + weight3 < distance63) {
                            distance63 = distance47 + weight3;
                            direction63 = direction47;
                            totalScore63 = distance63 + remainingDistance63;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                        break;
                    default:
                        int weight0 = location65.distanceSquaredTo(location67);
                        if (distance65 + weight0 < distance67) {
                            distance67 = distance65 + weight0;
                            direction67 = direction65;
                            totalScore67 = distance67 + remainingDistance67;
                        }
                        int weight1 = location43.distanceSquaredTo(location67);
                        if (distance43 + weight1 < distance67) {
                            distance67 = distance43 + weight1;
                            direction67 = direction43;
                            totalScore67 = distance67 + remainingDistance67;
                        }
                        int weight2 = location46.distanceSquaredTo(location67);
                        if (distance46 + weight2 < distance67) {
                            distance67 = distance46 + weight2;
                            direction67 = direction46;
                            totalScore67 = distance67 + remainingDistance67;
                        }
                        int weight3 = location41.distanceSquaredTo(location67);
                        if (distance41 + weight3 < distance67) {
                            distance67 = distance41 + weight3;
                            direction67 = direction41;
                            totalScore67 = distance67 + remainingDistance67;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                        break;
                    default:
                        int weight0 = location66.distanceSquaredTo(location68);
                        if (distance66 + weight0 < distance68) {
                            distance68 = distance66 + weight0;
                            direction68 = direction66;
                            totalScore68 = distance68 + remainingDistance68;
                        }
                        int weight1 = location44.distanceSquaredTo(location68);
                        if (distance44 + weight1 < distance68) {
                            distance68 = distance44 + weight1;
                            direction68 = direction44;
                            totalScore68 = distance68 + remainingDistance68;
                        }
                        int weight2 = location42.distanceSquaredTo(location68);
                        if (distance42 + weight2 < distance68) {
                            distance68 = distance42 + weight2;
                            direction68 = direction42;
                            totalScore68 = distance68 + remainingDistance68;
                        }
                        int weight3 = location48.distanceSquaredTo(location68);
                        if (distance48 + weight3 < distance68) {
                            distance68 = distance48 + weight3;
                            direction68 = direction48;
                            totalScore68 = distance68 + remainingDistance68;
                        }
                }
        }

        switch (target.x - myX) {
            case -4:
                switch (target.y - myY) {
                    case -2:
                        return direction52;
                    case -1:
                        return direction50;
                    case 0:
                        return direction49;
                    case 1:
                        return direction51;
                    case 2:
                        return direction53;
                }
                break;
            case -3:
                switch (target.y - myY) {
                    case -3:
                        return direction45;
                    case -2:
                        return direction28;
                    case -1:
                        return direction26;
                    case 0:
                        return direction25;
                    case 1:
                        return direction27;
                    case 2:
                        return direction29;
                    case 3:
                        return direction46;
                }
                break;
            case -2:
                switch (target.y - myY) {
                    case -4:
                        return direction62;
                    case -3:
                        return direction38;
                    case -2:
                        return direction21;
                    case -1:
                        return direction10;
                    case 0:
                        return direction9;
                    case 1:
                        return direction11;
                    case 2:
                        return direction22;
                    case 3:
                        return direction43;
                    case 4:
                        return direction67;
                }
                break;
            case -1:
                switch (target.y - myY) {
                    case -4:
                        return direction60;
                    case -3:
                        return direction36;
                    case -2:
                        return direction16;
                    case -1:
                        return direction5;
                    case 0:
                        return direction1;
                    case 1:
                        return direction6;
                    case 2:
                        return direction19;
                    case 3:
                        return direction41;
                    case 4:
                        return direction65;
                }
                break;
            case 0:
                switch (target.y - myY) {
                    case -4:
                        return direction59;
                    case -3:
                        return direction35;
                    case -2:
                        return direction15;
                    case -1:
                        return direction3;
                    case 1:
                        return direction4;
                    case 2:
                        return direction18;
                    case 3:
                        return direction40;
                    case 4:
                        return direction64;
                }
                break;
            case 1:
                switch (target.y - myY) {
                    case -4:
                        return direction61;
                    case -3:
                        return direction37;
                    case -2:
                        return direction17;
                    case -1:
                        return direction7;
                    case 0:
                        return direction2;
                    case 1:
                        return direction8;
                    case 2:
                        return direction20;
                    case 3:
                        return direction42;
                    case 4:
                        return direction66;
                }
                break;
            case 2:
                switch (target.y - myY) {
                    case -4:
                        return direction63;
                    case -3:
                        return direction39;
                    case -2:
                        return direction23;
                    case -1:
                        return direction13;
                    case 0:
                        return direction12;
                    case 1:
                        return direction14;
                    case 2:
                        return direction24;
                    case 3:
                        return direction44;
                    case 4:
                        return direction68;
                }
                break;
            case 3:
                switch (target.y - myY) {
                    case -3:
                        return direction47;
                    case -2:
                        return direction33;
                    case -1:
                        return direction31;
                    case 0:
                        return direction30;
                    case 1:
                        return direction32;
                    case 2:
                        return direction34;
                    case 3:
                        return direction48;
                }
                break;
            case 4:
                switch (target.y - myY) {
                    case -2:
                        return direction57;
                    case -1:
                        return direction55;
                    case 0:
                        return direction54;
                    case 1:
                        return direction56;
                    case 2:
                        return direction58;
                }
                break;
        }

        currentDistance = myLocation.distanceSquaredTo(target);

        // score28 = (currentDistance - location28.distanceSquaredTo(target)) / distance28;
        score28 = totalScore28;
        // score29 = (currentDistance - location29.distanceSquaredTo(target)) / distance29;
        score29 = totalScore29;
        // score33 = (currentDistance - location33.distanceSquaredTo(target)) / distance33;
        score33 = totalScore33;
        // score34 = (currentDistance - location34.distanceSquaredTo(target)) / distance34;
        score34 = totalScore34;
        // score38 = (currentDistance - location38.distanceSquaredTo(target)) / distance38;
        score38 = totalScore38;
        // score39 = (currentDistance - location39.distanceSquaredTo(target)) / distance39;
        score39 = totalScore39;
        // score43 = (currentDistance - location43.distanceSquaredTo(target)) / distance43;
        score43 = totalScore43;
        // score44 = (currentDistance - location44.distanceSquaredTo(target)) / distance44;
        score44 = totalScore44;
        // score49 = (currentDistance - location49.distanceSquaredTo(target)) / distance49;
        score49 = totalScore49;
        // score54 = (currentDistance - location54.distanceSquaredTo(target)) / distance54;
        score54 = totalScore54;
        // score59 = (currentDistance - location59.distanceSquaredTo(target)) / distance59;
        score59 = totalScore59;
        // score64 = (currentDistance - location64.distanceSquaredTo(target)) / distance64;
        score64 = totalScore64;
        // score50 = (currentDistance - location50.distanceSquaredTo(target)) / distance50;
        score50 = totalScore50;
        // score51 = (currentDistance - location51.distanceSquaredTo(target)) / distance51;
        score51 = totalScore51;
        // score55 = (currentDistance - location55.distanceSquaredTo(target)) / distance55;
        score55 = totalScore55;
        // score56 = (currentDistance - location56.distanceSquaredTo(target)) / distance56;
        score56 = totalScore56;
        // score60 = (currentDistance - location60.distanceSquaredTo(target)) / distance60;
        score60 = totalScore60;
        // score61 = (currentDistance - location61.distanceSquaredTo(target)) / distance61;
        score61 = totalScore61;
        // score65 = (currentDistance - location65.distanceSquaredTo(target)) / distance65;
        score65 = totalScore65;
        // score66 = (currentDistance - location66.distanceSquaredTo(target)) / distance66;
        score66 = totalScore66;
        // score45 = (currentDistance - location45.distanceSquaredTo(target)) / distance45;
        score45 = totalScore45;
        // score46 = (currentDistance - location46.distanceSquaredTo(target)) / distance46;
        score46 = totalScore46;
        // score47 = (currentDistance - location47.distanceSquaredTo(target)) / distance47;
        score47 = totalScore47;
        // score48 = (currentDistance - location48.distanceSquaredTo(target)) / distance48;
        score48 = totalScore48;
        // score52 = (currentDistance - location52.distanceSquaredTo(target)) / distance52;
        score52 = totalScore52;
        // score53 = (currentDistance - location53.distanceSquaredTo(target)) / distance53;
        score53 = totalScore53;
        // score57 = (currentDistance - location57.distanceSquaredTo(target)) / distance57;
        score57 = totalScore57;
        // score58 = (currentDistance - location58.distanceSquaredTo(target)) / distance58;
        score58 = totalScore58;
        // score62 = (currentDistance - location62.distanceSquaredTo(target)) / distance62;
        score62 = totalScore62;
        // score63 = (currentDistance - location63.distanceSquaredTo(target)) / distance63;
        score63 = totalScore63;
        // score67 = (currentDistance - location67.distanceSquaredTo(target)) / distance67;
        score67 = totalScore67;

        maxScore = Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(score28, score29), score33), score34), score38), score39), score43), score44), score49), score54), score59), score64), score50), score51), score55), score56), score60), score61), score65), score66), score45), score46), score47), score48), score52), score53), score57), score58), score62), score63), score67), (currentDistance - location68.distanceSquaredTo(target)) / distance68);

        if (maxScore == score28) {
            return direction28;
        }
        if (maxScore == score29) {
            return direction29;
        }
        if (maxScore == score33) {
            return direction33;
        }
        if (maxScore == score34) {
            return direction34;
        }
        if (maxScore == score38) {
            return direction38;
        }
        if (maxScore == score39) {
            return direction39;
        }
        if (maxScore == score43) {
            return direction43;
        }
        if (maxScore == score44) {
            return direction44;
        }
        if (maxScore == score49) {
            return direction49;
        }
        if (maxScore == score54) {
            return direction54;
        }
        if (maxScore == score59) {
            return direction59;
        }
        if (maxScore == score64) {
            return direction64;
        }
        if (maxScore == score50) {
            return direction50;
        }
        if (maxScore == score51) {
            return direction51;
        }
        if (maxScore == score55) {
            return direction55;
        }
        if (maxScore == score56) {
            return direction56;
        }
        if (maxScore == score60) {
            return direction60;
        }
        if (maxScore == score61) {
            return direction61;
        }
        if (maxScore == score65) {
            return direction65;
        }
        if (maxScore == score66) {
            return direction66;
        }
        if (maxScore == score45) {
            return direction45;
        }
        if (maxScore == score46) {
            return direction46;
        }
        if (maxScore == score47) {
            return direction47;
        }
        if (maxScore == score48) {
            return direction48;
        }
        if (maxScore == score52) {
            return direction52;
        }
        if (maxScore == score53) {
            return direction53;
        }
        if (maxScore == score57) {
            return direction57;
        }
        if (maxScore == score58) {
            return direction58;
        }
        if (maxScore == score62) {
            return direction62;
        }
        if (maxScore == score63) {
            return direction63;
        }
        if (maxScore == score67) {
            return direction67;
        }

        return direction68;
    }
}
