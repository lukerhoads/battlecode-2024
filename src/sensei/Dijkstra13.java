package sensei;

import battlecode.common.Direction;
import battlecode.common.GameActionException;
import battlecode.common.MapLocation;
import battlecode.common.RobotController;

// Generated by scripts/dijkstra.py
// Based on Malott Fat Cats's 2021 pathfinding
// Malott Fat Cats's 2021 post-mortem: https://www.battlecode.org/files/postmortem-2021-malott-fat-cats.pdf
public class Dijkstra13 {
    private static RobotController rc;

    private static int mapWidth;
    private static int mapHeight;

    private static MapLocation myLocation;
    private static int myX;
    private static int myY;
    private static int xOffset;
    private static int yOffset;

    private static MapLocation location1;
    private static double distance1;
    private static Direction direction1;
    private static MapLocation location2;
    private static double distance2;
    private static Direction direction2;
    private static MapLocation location3;
    private static double distance3;
    private static Direction direction3;
    private static MapLocation location4;
    private static double distance4;
    private static Direction direction4;
    private static MapLocation location5;
    private static double distance5;
    private static Direction direction5;
    private static MapLocation location6;
    private static double distance6;
    private static Direction direction6;
    private static MapLocation location7;
    private static double distance7;
    private static Direction direction7;
    private static MapLocation location8;
    private static double distance8;
    private static Direction direction8;
    private static MapLocation location9;
    private static double distance9;
    private static Direction direction9;
    private static MapLocation location12;
    private static double distance12;
    private static Direction direction12;
    private static MapLocation location15;
    private static double distance15;
    private static Direction direction15;
    private static MapLocation location18;
    private static double distance18;
    private static Direction direction18;
    private static MapLocation location10;
    private static double distance10;
    private static Direction direction10;
    private static MapLocation location11;
    private static double distance11;
    private static Direction direction11;
    private static MapLocation location13;
    private static double distance13;
    private static Direction direction13;
    private static MapLocation location14;
    private static double distance14;
    private static Direction direction14;
    private static MapLocation location16;
    private static double distance16;
    private static Direction direction16;
    private static MapLocation location17;
    private static double distance17;
    private static Direction direction17;
    private static MapLocation location19;
    private static double distance19;
    private static Direction direction19;
    private static MapLocation location20;
    private static double distance20;
    private static Direction direction20;
    private static MapLocation location21;
    private static double distance21;
    private static Direction direction21;
    private static MapLocation location22;
    private static double distance22;
    private static Direction direction22;
    private static MapLocation location23;
    private static double distance23;
    private static Direction direction23;
    private static MapLocation location24;
    private static double distance24;
    private static Direction direction24;
    private static MapLocation location25;
    private static double distance25;
    private static Direction direction25;
    private static MapLocation location30;
    private static double distance30;
    private static Direction direction30;
    private static MapLocation location35;
    private static double distance35;
    private static Direction direction35;
    private static MapLocation location40;
    private static double distance40;
    private static Direction direction40;
    private static MapLocation location26;
    private static double distance26;
    private static Direction direction26;
    private static MapLocation location27;
    private static double distance27;
    private static Direction direction27;
    private static MapLocation location31;
    private static double distance31;
    private static Direction direction31;
    private static MapLocation location32;
    private static double distance32;
    private static Direction direction32;
    private static MapLocation location36;
    private static double distance36;
    private static Direction direction36;
    private static MapLocation location37;
    private static double distance37;
    private static Direction direction37;
    private static MapLocation location41;
    private static double distance41;
    private static Direction direction41;
    private static MapLocation location42;
    private static double distance42;
    private static Direction direction42;
    private static MapLocation location28;
    private static double distance28;
    private static Direction direction28;
    private static MapLocation location29;
    private static double distance29;
    private static Direction direction29;
    private static MapLocation location33;
    private static double distance33;
    private static Direction direction33;
    private static MapLocation location34;
    private static double distance34;
    private static Direction direction34;
    private static MapLocation location38;
    private static double distance38;
    private static Direction direction38;
    private static MapLocation location39;
    private static double distance39;
    private static Direction direction39;
    private static MapLocation location43;
    private static double distance43;
    private static Direction direction43;
    private static MapLocation location44;
    private static double distance44;
    private static Direction direction44;

    private static double weight;

    private static double currentDistance;

    private static double score21;
    private static double score22;
    private static double score23;
    private static double score24;
    private static double score25;
    private static double score30;
    private static double score35;
    private static double score40;
    private static double score26;
    private static double score27;
    private static double score31;
    private static double score32;
    private static double score36;
    private static double score37;
    private static double score41;
    private static double score42;
    private static double score28;
    private static double score29;
    private static double score33;
    private static double score34;
    private static double score38;
    private static double score39;
    private static double score43;

    private static double maxScore;

    public Dijkstra13(RobotController rc) {
        Dijkstra13.rc = rc;

        mapWidth = rc.getMapWidth();
        mapHeight = rc.getMapHeight();
    }

    public Direction getBestDirection(MapLocation target, Direction blockedDirection) throws GameActionException {
        myLocation = rc.getLocation();
        myX = myLocation.x;
        myY = myLocation.y;
        xOffset = mapWidth - myX;
        yOffset = mapHeight - myY;

        location1 = rc.adjacentLocation(Direction.WEST);
        distance1 = 1_000_000.0;
        location2 = rc.adjacentLocation(Direction.EAST);
        distance2 = 1_000_000.0;
        location3 = rc.adjacentLocation(Direction.SOUTH);
        distance3 = 1_000_000.0;
        location4 = rc.adjacentLocation(Direction.NORTH);
        distance4 = 1_000_000.0;
        location5 = rc.adjacentLocation(Direction.SOUTHWEST);
        distance5 = 1_000_000.0;
        location6 = rc.adjacentLocation(Direction.NORTHWEST);
        distance6 = 1_000_000.0;
        location7 = rc.adjacentLocation(Direction.SOUTHEAST);
        distance7 = 1_000_000.0;
        location8 = rc.adjacentLocation(Direction.NORTHEAST);
        distance8 = 1_000_000.0;
        location9 = location1.add(Direction.WEST);
        distance9 = 1_000_000.0;
        location12 = location2.add(Direction.EAST);
        distance12 = 1_000_000.0;
        location15 = location3.add(Direction.SOUTH);
        distance15 = 1_000_000.0;
        location18 = location4.add(Direction.NORTH);
        distance18 = 1_000_000.0;
        location10 = location1.add(Direction.SOUTHWEST);
        distance10 = 1_000_000.0;
        location11 = location1.add(Direction.NORTHWEST);
        distance11 = 1_000_000.0;
        location13 = location2.add(Direction.SOUTHEAST);
        distance13 = 1_000_000.0;
        location14 = location2.add(Direction.NORTHEAST);
        distance14 = 1_000_000.0;
        location16 = location3.add(Direction.SOUTHWEST);
        distance16 = 1_000_000.0;
        location17 = location3.add(Direction.SOUTHEAST);
        distance17 = 1_000_000.0;
        location19 = location4.add(Direction.NORTHWEST);
        distance19 = 1_000_000.0;
        location20 = location4.add(Direction.NORTHEAST);
        distance20 = 1_000_000.0;
        location21 = location5.add(Direction.SOUTHWEST);
        distance21 = 1_000_000.0;
        location22 = location6.add(Direction.NORTHWEST);
        distance22 = 1_000_000.0;
        location23 = location7.add(Direction.SOUTHEAST);
        distance23 = 1_000_000.0;
        location24 = location8.add(Direction.NORTHEAST);
        distance24 = 1_000_000.0;
        location25 = location9.add(Direction.WEST);
        distance25 = 1_000_000.0;
        location30 = location12.add(Direction.EAST);
        distance30 = 1_000_000.0;
        location35 = location15.add(Direction.SOUTH);
        distance35 = 1_000_000.0;
        location40 = location18.add(Direction.NORTH);
        distance40 = 1_000_000.0;
        location26 = location9.add(Direction.SOUTHWEST);
        distance26 = 1_000_000.0;
        location27 = location9.add(Direction.NORTHWEST);
        distance27 = 1_000_000.0;
        location31 = location12.add(Direction.SOUTHEAST);
        distance31 = 1_000_000.0;
        location32 = location12.add(Direction.NORTHEAST);
        distance32 = 1_000_000.0;
        location36 = location15.add(Direction.SOUTHWEST);
        distance36 = 1_000_000.0;
        location37 = location15.add(Direction.SOUTHEAST);
        distance37 = 1_000_000.0;
        location41 = location18.add(Direction.NORTHWEST);
        distance41 = 1_000_000.0;
        location42 = location18.add(Direction.NORTHEAST);
        distance42 = 1_000_000.0;
        location28 = location10.add(Direction.SOUTHWEST);
        distance28 = 1_000_000.0;
        location29 = location11.add(Direction.NORTHWEST);
        distance29 = 1_000_000.0;
        location33 = location13.add(Direction.SOUTHEAST);
        distance33 = 1_000_000.0;
        location34 = location14.add(Direction.NORTHEAST);
        distance34 = 1_000_000.0;
        location38 = location16.add(Direction.SOUTHWEST);
        distance38 = 1_000_000.0;
        location39 = location17.add(Direction.SOUTHEAST);
        distance39 = 1_000_000.0;
        location43 = location19.add(Direction.NORTHWEST);
        distance43 = 1_000_000.0;
        location44 = location20.add(Direction.NORTHEAST);
        distance44 = 1_000_000.0;

        if (blockedDirection != Direction.WEST && rc.canMove(Direction.WEST)) {
            distance1 = 1.0 + myLocation.distanceSquaredTo(location1);
            direction1 = Direction.WEST;
        }
        if (blockedDirection != Direction.EAST && rc.canMove(Direction.EAST)) {
            distance2 = 1.0 + myLocation.distanceSquaredTo(location2);
            direction2 = Direction.EAST;
        }
        if (blockedDirection != Direction.SOUTH && rc.canMove(Direction.SOUTH)) {
            distance3 = 1.0 + myLocation.distanceSquaredTo(location3);
            direction3 = Direction.SOUTH;
        }
        if (blockedDirection != Direction.NORTH && rc.canMove(Direction.NORTH)) {
            distance4 = 1.0 + myLocation.distanceSquaredTo(location4);
            direction4 = Direction.NORTH;
        }
        if (blockedDirection != Direction.SOUTHWEST && rc.canMove(Direction.SOUTHWEST)) {
            distance5 = 1.0 + myLocation.distanceSquaredTo(location5);
            direction5 = Direction.SOUTHWEST;
        }
        if (blockedDirection != Direction.NORTHWEST && rc.canMove(Direction.NORTHWEST)) {
            distance6 = 1.0 + myLocation.distanceSquaredTo(location6);
            direction6 = Direction.NORTHWEST;
        }
        if (blockedDirection != Direction.SOUTHEAST && rc.canMove(Direction.SOUTHEAST)) {
            distance7 = 1.0 + myLocation.distanceSquaredTo(location7);
            direction7 = Direction.SOUTHEAST;
        }
        if (blockedDirection != Direction.NORTHEAST && rc.canMove(Direction.NORTHEAST)) {
            distance8 = 1.0 + myLocation.distanceSquaredTo(location8);
            direction8 = Direction.NORTHEAST;
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                weight = 1.0 + myLocation.distanceSquaredTo(location9);
                if (distance1 + weight < distance9) {
                    distance9 = distance1 + weight;
                    direction9 = direction1;
                }
                if (distance5 + weight < distance9) {
                    distance9 = distance5 + weight;
                    direction9 = direction5;
                }
                if (distance6 + weight < distance9) {
                    distance9 = distance6 + weight;
                    direction9 = direction6;
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                weight = 1.0 + myLocation.distanceSquaredTo(location12);
                if (distance2 + weight < distance12) {
                    distance12 = distance2 + weight;
                    direction12 = direction2;
                }
                if (distance7 + weight < distance12) {
                    distance12 = distance7 + weight;
                    direction12 = direction7;
                }
                if (distance8 + weight < distance12) {
                    distance12 = distance8 + weight;
                    direction12 = direction8;
                }
        }
        switch (myY) {
            case 0:
            case 1:
                break;
            default:
                weight = 1.0 + myLocation.distanceSquaredTo(location15);
                if (distance3 + weight < distance15) {
                    distance15 = distance3 + weight;
                    direction15 = direction3;
                }
                if (distance5 + weight < distance15) {
                    distance15 = distance5 + weight;
                    direction15 = direction5;
                }
                if (distance7 + weight < distance15) {
                    distance15 = distance7 + weight;
                    direction15 = direction7;
                }
        }
        switch (yOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                weight = 1.0 + myLocation.distanceSquaredTo(location18);
                if (distance4 + weight < distance18) {
                    distance18 = distance4 + weight;
                    direction18 = direction4;
                }
                if (distance6 + weight < distance18) {
                    distance18 = distance6 + weight;
                    direction18 = direction6;
                }
                if (distance8 + weight < distance18) {
                    distance18 = distance8 + weight;
                    direction18 = direction8;
                }
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                switch (myY) {
                    case 0:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location10);
                        if (distance5 + weight < distance10) {
                            distance10 = distance5 + weight;
                            direction10 = direction5;
                        }
                        if (distance9 + weight < distance10) {
                            distance10 = distance9 + weight;
                            direction10 = direction9;
                        }
                        if (distance1 + weight < distance10) {
                            distance10 = distance1 + weight;
                            direction10 = direction1;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location11);
                        if (distance6 + weight < distance11) {
                            distance11 = distance6 + weight;
                            direction11 = direction6;
                        }
                        if (distance9 + weight < distance11) {
                            distance11 = distance9 + weight;
                            direction11 = direction9;
                        }
                        if (distance1 + weight < distance11) {
                            distance11 = distance1 + weight;
                            direction11 = direction1;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (myY) {
                    case 0:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location13);
                        if (distance7 + weight < distance13) {
                            distance13 = distance7 + weight;
                            direction13 = direction7;
                        }
                        if (distance12 + weight < distance13) {
                            distance13 = distance12 + weight;
                            direction13 = direction12;
                        }
                        if (distance2 + weight < distance13) {
                            distance13 = distance2 + weight;
                            direction13 = direction2;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location14);
                        if (distance8 + weight < distance14) {
                            distance14 = distance8 + weight;
                            direction14 = direction8;
                        }
                        if (distance12 + weight < distance14) {
                            distance14 = distance12 + weight;
                            direction14 = direction12;
                        }
                        if (distance2 + weight < distance14) {
                            distance14 = distance2 + weight;
                            direction14 = direction2;
                        }
                }
        }
        switch (myX) {
            case 0:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location16);
                        if (distance15 + weight < distance16) {
                            distance16 = distance15 + weight;
                            direction16 = direction15;
                        }
                        if (distance5 + weight < distance16) {
                            distance16 = distance5 + weight;
                            direction16 = direction5;
                        }
                        if (distance3 + weight < distance16) {
                            distance16 = distance3 + weight;
                            direction16 = direction3;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location17);
                        if (distance15 + weight < distance17) {
                            distance17 = distance15 + weight;
                            direction17 = direction15;
                        }
                        if (distance7 + weight < distance17) {
                            distance17 = distance7 + weight;
                            direction17 = direction7;
                        }
                        if (distance3 + weight < distance17) {
                            distance17 = distance3 + weight;
                            direction17 = direction3;
                        }
                }
        }
        switch (myX) {
            case 0:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location19);
                        if (distance18 + weight < distance19) {
                            distance19 = distance18 + weight;
                            direction19 = direction18;
                        }
                        if (distance6 + weight < distance19) {
                            distance19 = distance6 + weight;
                            direction19 = direction6;
                        }
                        if (distance4 + weight < distance19) {
                            distance19 = distance4 + weight;
                            direction19 = direction4;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location20);
                        if (distance18 + weight < distance20) {
                            distance20 = distance18 + weight;
                            direction20 = direction18;
                        }
                        if (distance8 + weight < distance20) {
                            distance20 = distance8 + weight;
                            direction20 = direction8;
                        }
                        if (distance4 + weight < distance20) {
                            distance20 = distance4 + weight;
                            direction20 = direction4;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location21);
                        if (distance16 + weight < distance21) {
                            distance21 = distance16 + weight;
                            direction21 = direction16;
                        }
                        if (distance10 + weight < distance21) {
                            distance21 = distance10 + weight;
                            direction21 = direction10;
                        }
                        if (distance5 + weight < distance21) {
                            distance21 = distance5 + weight;
                            direction21 = direction5;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location22);
                        if (distance19 + weight < distance22) {
                            distance22 = distance19 + weight;
                            direction22 = direction19;
                        }
                        if (distance11 + weight < distance22) {
                            distance22 = distance11 + weight;
                            direction22 = direction11;
                        }
                        if (distance6 + weight < distance22) {
                            distance22 = distance6 + weight;
                            direction22 = direction6;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location23);
                        if (distance17 + weight < distance23) {
                            distance23 = distance17 + weight;
                            direction23 = direction17;
                        }
                        if (distance13 + weight < distance23) {
                            distance23 = distance13 + weight;
                            direction23 = direction13;
                        }
                        if (distance7 + weight < distance23) {
                            distance23 = distance7 + weight;
                            direction23 = direction7;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location24);
                        if (distance20 + weight < distance24) {
                            distance24 = distance20 + weight;
                            direction24 = direction20;
                        }
                        if (distance14 + weight < distance24) {
                            distance24 = distance14 + weight;
                            direction24 = direction14;
                        }
                        if (distance8 + weight < distance24) {
                            distance24 = distance8 + weight;
                            direction24 = direction8;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                weight = 1.0 + myLocation.distanceSquaredTo(location25);
                if (distance9 + weight < distance25) {
                    distance25 = distance9 + weight;
                    direction25 = direction9;
                }
                if (distance10 + weight < distance25) {
                    distance25 = distance10 + weight;
                    direction25 = direction10;
                }
                if (distance11 + weight < distance25) {
                    distance25 = distance11 + weight;
                    direction25 = direction11;
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                weight = 1.0 + myLocation.distanceSquaredTo(location30);
                if (distance12 + weight < distance30) {
                    distance30 = distance12 + weight;
                    direction30 = direction12;
                }
                if (distance13 + weight < distance30) {
                    distance30 = distance13 + weight;
                    direction30 = direction13;
                }
                if (distance14 + weight < distance30) {
                    distance30 = distance14 + weight;
                    direction30 = direction14;
                }
        }
        switch (myY) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                weight = 1.0 + myLocation.distanceSquaredTo(location35);
                if (distance15 + weight < distance35) {
                    distance35 = distance15 + weight;
                    direction35 = direction15;
                }
                if (distance16 + weight < distance35) {
                    distance35 = distance16 + weight;
                    direction35 = direction16;
                }
                if (distance17 + weight < distance35) {
                    distance35 = distance17 + weight;
                    direction35 = direction17;
                }
        }
        switch (yOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                weight = 1.0 + myLocation.distanceSquaredTo(location40);
                if (distance18 + weight < distance40) {
                    distance40 = distance18 + weight;
                    direction40 = direction18;
                }
                if (distance19 + weight < distance40) {
                    distance40 = distance19 + weight;
                    direction40 = direction19;
                }
                if (distance20 + weight < distance40) {
                    distance40 = distance20 + weight;
                    direction40 = direction20;
                }
        }
        switch (myX) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (myY) {
                    case 0:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location26);
                        if (distance10 + weight < distance26) {
                            distance26 = distance10 + weight;
                            direction26 = direction10;
                        }
                        if (distance25 + weight < distance26) {
                            distance26 = distance25 + weight;
                            direction26 = direction25;
                        }
                        if (distance21 + weight < distance26) {
                            distance26 = distance21 + weight;
                            direction26 = direction21;
                        }
                        if (distance9 + weight < distance26) {
                            distance26 = distance9 + weight;
                            direction26 = direction9;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location27);
                        if (distance11 + weight < distance27) {
                            distance27 = distance11 + weight;
                            direction27 = direction11;
                        }
                        if (distance25 + weight < distance27) {
                            distance27 = distance25 + weight;
                            direction27 = direction25;
                        }
                        if (distance9 + weight < distance27) {
                            distance27 = distance9 + weight;
                            direction27 = direction9;
                        }
                        if (distance22 + weight < distance27) {
                            distance27 = distance22 + weight;
                            direction27 = direction22;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                switch (myY) {
                    case 0:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location31);
                        if (distance13 + weight < distance31) {
                            distance31 = distance13 + weight;
                            direction31 = direction13;
                        }
                        if (distance30 + weight < distance31) {
                            distance31 = distance30 + weight;
                            direction31 = direction30;
                        }
                        if (distance23 + weight < distance31) {
                            distance31 = distance23 + weight;
                            direction31 = direction23;
                        }
                        if (distance12 + weight < distance31) {
                            distance31 = distance12 + weight;
                            direction31 = direction12;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location32);
                        if (distance14 + weight < distance32) {
                            distance32 = distance14 + weight;
                            direction32 = direction14;
                        }
                        if (distance30 + weight < distance32) {
                            distance32 = distance30 + weight;
                            direction32 = direction30;
                        }
                        if (distance12 + weight < distance32) {
                            distance32 = distance12 + weight;
                            direction32 = direction12;
                        }
                        if (distance24 + weight < distance32) {
                            distance32 = distance24 + weight;
                            direction32 = direction24;
                        }
                }
        }
        switch (myX) {
            case 0:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location36);
                        if (distance35 + weight < distance36) {
                            distance36 = distance35 + weight;
                            direction36 = direction35;
                        }
                        if (distance16 + weight < distance36) {
                            distance36 = distance16 + weight;
                            direction36 = direction16;
                        }
                        if (distance21 + weight < distance36) {
                            distance36 = distance21 + weight;
                            direction36 = direction21;
                        }
                        if (distance15 + weight < distance36) {
                            distance36 = distance15 + weight;
                            direction36 = direction15;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location37);
                        if (distance35 + weight < distance37) {
                            distance37 = distance35 + weight;
                            direction37 = direction35;
                        }
                        if (distance17 + weight < distance37) {
                            distance37 = distance17 + weight;
                            direction37 = direction17;
                        }
                        if (distance15 + weight < distance37) {
                            distance37 = distance15 + weight;
                            direction37 = direction15;
                        }
                        if (distance23 + weight < distance37) {
                            distance37 = distance23 + weight;
                            direction37 = direction23;
                        }
                }
        }
        switch (myX) {
            case 0:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location41);
                        if (distance40 + weight < distance41) {
                            distance41 = distance40 + weight;
                            direction41 = direction40;
                        }
                        if (distance19 + weight < distance41) {
                            distance41 = distance19 + weight;
                            direction41 = direction19;
                        }
                        if (distance22 + weight < distance41) {
                            distance41 = distance22 + weight;
                            direction41 = direction22;
                        }
                        if (distance18 + weight < distance41) {
                            distance41 = distance18 + weight;
                            direction41 = direction18;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location42);
                        if (distance40 + weight < distance42) {
                            distance42 = distance40 + weight;
                            direction42 = direction40;
                        }
                        if (distance20 + weight < distance42) {
                            distance42 = distance20 + weight;
                            direction42 = direction20;
                        }
                        if (distance18 + weight < distance42) {
                            distance42 = distance18 + weight;
                            direction42 = direction18;
                        }
                        if (distance24 + weight < distance42) {
                            distance42 = distance24 + weight;
                            direction42 = direction24;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location28);
                        if (distance21 + weight < distance28) {
                            distance28 = distance21 + weight;
                            direction28 = direction21;
                        }
                        if (distance26 + weight < distance28) {
                            distance28 = distance26 + weight;
                            direction28 = direction26;
                        }
                        if (distance10 + weight < distance28) {
                            distance28 = distance10 + weight;
                            direction28 = direction10;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location29);
                        if (distance22 + weight < distance29) {
                            distance29 = distance22 + weight;
                            direction29 = direction22;
                        }
                        if (distance27 + weight < distance29) {
                            distance29 = distance27 + weight;
                            direction29 = direction27;
                        }
                        if (distance11 + weight < distance29) {
                            distance29 = distance11 + weight;
                            direction29 = direction11;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location33);
                        if (distance23 + weight < distance33) {
                            distance33 = distance23 + weight;
                            direction33 = direction23;
                        }
                        if (distance31 + weight < distance33) {
                            distance33 = distance31 + weight;
                            direction33 = direction31;
                        }
                        if (distance13 + weight < distance33) {
                            distance33 = distance13 + weight;
                            direction33 = direction13;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location34);
                        if (distance24 + weight < distance34) {
                            distance34 = distance24 + weight;
                            direction34 = direction24;
                        }
                        if (distance32 + weight < distance34) {
                            distance34 = distance32 + weight;
                            direction34 = direction32;
                        }
                        if (distance14 + weight < distance34) {
                            distance34 = distance14 + weight;
                            direction34 = direction14;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location38);
                        if (distance36 + weight < distance38) {
                            distance38 = distance36 + weight;
                            direction38 = direction36;
                        }
                        if (distance21 + weight < distance38) {
                            distance38 = distance21 + weight;
                            direction38 = direction21;
                        }
                        if (distance16 + weight < distance38) {
                            distance38 = distance16 + weight;
                            direction38 = direction16;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location39);
                        if (distance37 + weight < distance39) {
                            distance39 = distance37 + weight;
                            direction39 = direction37;
                        }
                        if (distance23 + weight < distance39) {
                            distance39 = distance23 + weight;
                            direction39 = direction23;
                        }
                        if (distance17 + weight < distance39) {
                            distance39 = distance17 + weight;
                            direction39 = direction17;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location43);
                        if (distance41 + weight < distance43) {
                            distance43 = distance41 + weight;
                            direction43 = direction41;
                        }
                        if (distance22 + weight < distance43) {
                            distance43 = distance22 + weight;
                            direction43 = direction22;
                        }
                        if (distance19 + weight < distance43) {
                            distance43 = distance19 + weight;
                            direction43 = direction19;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    default:
                        weight = 1.0 + myLocation.distanceSquaredTo(location44);
                        if (distance42 + weight < distance44) {
                            distance44 = distance42 + weight;
                            direction44 = direction42;
                        }
                        if (distance24 + weight < distance44) {
                            distance44 = distance24 + weight;
                            direction44 = direction24;
                        }
                        if (distance20 + weight < distance44) {
                            distance44 = distance20 + weight;
                            direction44 = direction20;
                        }
                }
        }

        switch (target.x - myX) {
            case -3:
                switch (target.y - myY) {
                    case -2:
                        return direction28;
                    case -1:
                        return direction26;
                    case 0:
                        return direction25;
                    case 1:
                        return direction27;
                    case 2:
                        return direction29;
                }
                break;
            case -2:
                switch (target.y - myY) {
                    case -3:
                        return direction38;
                    case -2:
                        return direction21;
                    case -1:
                        return direction10;
                    case 0:
                        return direction9;
                    case 1:
                        return direction11;
                    case 2:
                        return direction22;
                    case 3:
                        return direction43;
                }
                break;
            case -1:
                switch (target.y - myY) {
                    case -3:
                        return direction36;
                    case -2:
                        return direction16;
                    case -1:
                        return direction5;
                    case 0:
                        return direction1;
                    case 1:
                        return direction6;
                    case 2:
                        return direction19;
                    case 3:
                        return direction41;
                }
                break;
            case 0:
                switch (target.y - myY) {
                    case -3:
                        return direction35;
                    case -2:
                        return direction15;
                    case -1:
                        return direction3;
                    case 1:
                        return direction4;
                    case 2:
                        return direction18;
                    case 3:
                        return direction40;
                }
                break;
            case 1:
                switch (target.y - myY) {
                    case -3:
                        return direction37;
                    case -2:
                        return direction17;
                    case -1:
                        return direction7;
                    case 0:
                        return direction2;
                    case 1:
                        return direction8;
                    case 2:
                        return direction20;
                    case 3:
                        return direction42;
                }
                break;
            case 2:
                switch (target.y - myY) {
                    case -3:
                        return direction39;
                    case -2:
                        return direction23;
                    case -1:
                        return direction13;
                    case 0:
                        return direction12;
                    case 1:
                        return direction14;
                    case 2:
                        return direction24;
                    case 3:
                        return direction44;
                }
                break;
            case 3:
                switch (target.y - myY) {
                    case -2:
                        return direction33;
                    case -1:
                        return direction31;
                    case 0:
                        return direction30;
                    case 1:
                        return direction32;
                    case 2:
                        return direction34;
                }
                break;
        }

        currentDistance = myLocation.distanceSquaredTo(target);

        score21 = (currentDistance - location21.distanceSquaredTo(target)) / distance21;
        score22 = (currentDistance - location22.distanceSquaredTo(target)) / distance22;
        score23 = (currentDistance - location23.distanceSquaredTo(target)) / distance23;
        score24 = (currentDistance - location24.distanceSquaredTo(target)) / distance24;
        score25 = (currentDistance - location25.distanceSquaredTo(target)) / distance25;
        score30 = (currentDistance - location30.distanceSquaredTo(target)) / distance30;
        score35 = (currentDistance - location35.distanceSquaredTo(target)) / distance35;
        score40 = (currentDistance - location40.distanceSquaredTo(target)) / distance40;
        score26 = (currentDistance - location26.distanceSquaredTo(target)) / distance26;
        score27 = (currentDistance - location27.distanceSquaredTo(target)) / distance27;
        score31 = (currentDistance - location31.distanceSquaredTo(target)) / distance31;
        score32 = (currentDistance - location32.distanceSquaredTo(target)) / distance32;
        score36 = (currentDistance - location36.distanceSquaredTo(target)) / distance36;
        score37 = (currentDistance - location37.distanceSquaredTo(target)) / distance37;
        score41 = (currentDistance - location41.distanceSquaredTo(target)) / distance41;
        score42 = (currentDistance - location42.distanceSquaredTo(target)) / distance42;
        score28 = (currentDistance - location28.distanceSquaredTo(target)) / distance28;
        score29 = (currentDistance - location29.distanceSquaredTo(target)) / distance29;
        score33 = (currentDistance - location33.distanceSquaredTo(target)) / distance33;
        score34 = (currentDistance - location34.distanceSquaredTo(target)) / distance34;
        score38 = (currentDistance - location38.distanceSquaredTo(target)) / distance38;
        score39 = (currentDistance - location39.distanceSquaredTo(target)) / distance39;
        score43 = (currentDistance - location43.distanceSquaredTo(target)) / distance43;

        maxScore = Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(score21, score22), score23), score24), score25), score30), score35), score40), score26), score27), score31), score32), score36), score37), score41), score42), score28), score29), score33), score34), score38), score39), score43), (currentDistance - location44.distanceSquaredTo(target)) / distance44);

        if (maxScore == score21) {
            return direction21;
        }
        if (maxScore == score22) {
            return direction22;
        }
        if (maxScore == score23) {
            return direction23;
        }
        if (maxScore == score24) {
            return direction24;
        }
        if (maxScore == score25) {
            return direction25;
        }
        if (maxScore == score30) {
            return direction30;
        }
        if (maxScore == score35) {
            return direction35;
        }
        if (maxScore == score40) {
            return direction40;
        }
        if (maxScore == score26) {
            return direction26;
        }
        if (maxScore == score27) {
            return direction27;
        }
        if (maxScore == score31) {
            return direction31;
        }
        if (maxScore == score32) {
            return direction32;
        }
        if (maxScore == score36) {
            return direction36;
        }
        if (maxScore == score37) {
            return direction37;
        }
        if (maxScore == score41) {
            return direction41;
        }
        if (maxScore == score42) {
            return direction42;
        }
        if (maxScore == score28) {
            return direction28;
        }
        if (maxScore == score29) {
            return direction29;
        }
        if (maxScore == score33) {
            return direction33;
        }
        if (maxScore == score34) {
            return direction34;
        }
        if (maxScore == score38) {
            return direction38;
        }
        if (maxScore == score39) {
            return direction39;
        }
        if (maxScore == score43) {
            return direction43;
        }

        return direction44;
    }
}
