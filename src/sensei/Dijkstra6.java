package sensei;

import battlecode.common.Direction;
import battlecode.common.GameActionException;
import battlecode.common.MapLocation;
import battlecode.common.RobotController;

// Generated by scripts/dijkstra.py
// Based on Malott Fat Cats's 2021 pathfinding
// Malott Fat Cats's 2021 post-mortem: https://www.battlecode.org/files/postmortem-2021-malott-fat-cats.pdf
public class Dijkstra6 {
    private static RobotController rc;

    private static int mapWidth;
    private static int mapHeight;

    private static MapLocation myLocation;
    private static int myX;
    private static int myY;
    private static int xOffset;
    private static int yOffset;

    private static MapLocation location1;
    private static double distance1;
    private static Direction direction1;
    private static MapLocation location2;
    private static double distance2;
    private static Direction direction2;
    private static MapLocation location3;
    private static double distance3;
    private static Direction direction3;
    private static MapLocation location4;
    private static double distance4;
    private static Direction direction4;
    private static MapLocation location5;
    private static double distance5;
    private static Direction direction5;
    private static MapLocation location6;
    private static double distance6;
    private static Direction direction6;
    private static MapLocation location7;
    private static double distance7;
    private static Direction direction7;
    private static MapLocation location8;
    private static double distance8;
    private static Direction direction8;
    private static MapLocation location9;
    private static double distance9;
    private static Direction direction9;
    private static MapLocation location12;
    private static double distance12;
    private static Direction direction12;
    private static MapLocation location15;
    private static double distance15;
    private static Direction direction15;
    private static MapLocation location18;
    private static double distance18;
    private static Direction direction18;
    private static MapLocation location10;
    private static double distance10;
    private static Direction direction10;
    private static MapLocation location11;
    private static double distance11;
    private static Direction direction11;
    private static MapLocation location13;
    private static double distance13;
    private static Direction direction13;
    private static MapLocation location14;
    private static double distance14;
    private static Direction direction14;
    private static MapLocation location16;
    private static double distance16;
    private static Direction direction16;
    private static MapLocation location17;
    private static double distance17;
    private static Direction direction17;
    private static MapLocation location19;
    private static double distance19;
    private static Direction direction19;
    private static MapLocation location20;
    private static double distance20;
    private static Direction direction20;

    private static double weight;

    private static double currentDistance;

    private static double score5;
    private static double score6;
    private static double score7;
    private static double score8;
    private static double score9;
    private static double score12;
    private static double score15;
    private static double score18;
    private static double score10;
    private static double score11;
    private static double score13;
    private static double score14;
    private static double score16;
    private static double score17;
    private static double score19;

    private static double maxScore;

    public Dijkstra6(RobotController rc) {
        Dijkstra6.rc = rc;

        mapWidth = rc.getMapWidth();
        mapHeight = rc.getMapHeight();
    }

    public Direction getBestDirection(MapLocation target, Direction blockedDirection) throws GameActionException {
        myLocation = rc.getLocation();
        myX = myLocation.x;
        myY = myLocation.y;
        xOffset = mapWidth - myX;
        yOffset = mapHeight - myY;

        location1 = rc.adjacentLocation(Direction.WEST);
        distance1 = 1_000_000.0;
        location2 = rc.adjacentLocation(Direction.EAST);
        distance2 = 1_000_000.0;
        location3 = rc.adjacentLocation(Direction.SOUTH);
        distance3 = 1_000_000.0;
        location4 = rc.adjacentLocation(Direction.NORTH);
        distance4 = 1_000_000.0;
        location5 = rc.adjacentLocation(Direction.SOUTHWEST);
        distance5 = 1_000_000.0;
        location6 = rc.adjacentLocation(Direction.NORTHWEST);
        distance6 = 1_000_000.0;
        location7 = rc.adjacentLocation(Direction.SOUTHEAST);
        distance7 = 1_000_000.0;
        location8 = rc.adjacentLocation(Direction.NORTHEAST);
        distance8 = 1_000_000.0;
        location9 = location1.add(Direction.WEST);
        distance9 = 1_000_000.0;
        location12 = location2.add(Direction.EAST);
        distance12 = 1_000_000.0;
        location15 = location3.add(Direction.SOUTH);
        distance15 = 1_000_000.0;
        location18 = location4.add(Direction.NORTH);
        distance18 = 1_000_000.0;
        location10 = location1.add(Direction.SOUTHWEST);
        distance10 = 1_000_000.0;
        location11 = location1.add(Direction.NORTHWEST);
        distance11 = 1_000_000.0;
        location13 = location2.add(Direction.SOUTHEAST);
        distance13 = 1_000_000.0;
        location14 = location2.add(Direction.NORTHEAST);
        distance14 = 1_000_000.0;
        location16 = location3.add(Direction.SOUTHWEST);
        distance16 = 1_000_000.0;
        location17 = location3.add(Direction.SOUTHEAST);
        distance17 = 1_000_000.0;
        location19 = location4.add(Direction.NORTHWEST);
        distance19 = 1_000_000.0;
        location20 = location4.add(Direction.NORTHEAST);
        distance20 = 1_000_000.0;

        if (blockedDirection != Direction.WEST && rc.canMove(Direction.WEST)) {
            distance1 = location1.distanceSquaredTo(target) + (rc.senseMapInfo(location1).isWall() ? 10000 : 0);;
            direction1 = Direction.WEST;
        }
        if (blockedDirection != Direction.EAST && rc.canMove(Direction.EAST)) {
            distance2 = location2.distanceSquaredTo(target) + (rc.senseMapInfo(location2).isWall() ? 10000 : 0);;
            direction2 = Direction.EAST;
        }
        if (blockedDirection != Direction.SOUTH && rc.canMove(Direction.SOUTH)) {
            distance3 = location3.distanceSquaredTo(target) + (rc.senseMapInfo(location3).isWall() ? 10000 : 0);;
            direction3 = Direction.SOUTH;
        }
        if (blockedDirection != Direction.NORTH && rc.canMove(Direction.NORTH)) {
            distance4 = location4.distanceSquaredTo(target) + (rc.senseMapInfo(location4).isWall() ? 10000 : 0);;
            direction4 = Direction.NORTH;
        }
        if (blockedDirection != Direction.SOUTHWEST && rc.canMove(Direction.SOUTHWEST)) {
            distance5 = location5.distanceSquaredTo(target) + (rc.senseMapInfo(location5).isWall() ? 10000 : 0);;
            direction5 = Direction.SOUTHWEST;
        }
        if (blockedDirection != Direction.NORTHWEST && rc.canMove(Direction.NORTHWEST)) {
            distance6 = location6.distanceSquaredTo(target) + (rc.senseMapInfo(location6).isWall() ? 10000 : 0);;
            direction6 = Direction.NORTHWEST;
        }
        if (blockedDirection != Direction.SOUTHEAST && rc.canMove(Direction.SOUTHEAST)) {
            distance7 = location7.distanceSquaredTo(target) + (rc.senseMapInfo(location7).isWall() ? 10000 : 0);;
            direction7 = Direction.SOUTHEAST;
        }
        if (blockedDirection != Direction.NORTHEAST && rc.canMove(Direction.NORTHEAST)) {
            distance8 = location8.distanceSquaredTo(target) + (rc.senseMapInfo(location8).isWall() ? 10000 : 0);;
            direction8 = Direction.NORTHEAST;
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                weight = location9.distanceSquaredTo(target) + (rc.senseMapInfo(location9).isWall() ? 10000 : 0);;
                if (distance1 + weight < distance9) {
                    distance9 = distance1 + weight;
                    direction9 = direction1;
                }
                if (distance5 + weight < distance9) {
                    distance9 = distance5 + weight;
                    direction9 = direction5;
                }
                if (distance6 + weight < distance9) {
                    distance9 = distance6 + weight;
                    direction9 = direction6;
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                weight = location12.distanceSquaredTo(target) + (rc.senseMapInfo(location12).isWall() ? 10000 : 0);;
                if (distance2 + weight < distance12) {
                    distance12 = distance2 + weight;
                    direction12 = direction2;
                }
                if (distance7 + weight < distance12) {
                    distance12 = distance7 + weight;
                    direction12 = direction7;
                }
                if (distance8 + weight < distance12) {
                    distance12 = distance8 + weight;
                    direction12 = direction8;
                }
        }
        switch (myY) {
            case 0:
            case 1:
                break;
            default:
                weight = location15.distanceSquaredTo(target) + (rc.senseMapInfo(location15).isWall() ? 10000 : 0);;
                if (distance3 + weight < distance15) {
                    distance15 = distance3 + weight;
                    direction15 = direction3;
                }
                if (distance5 + weight < distance15) {
                    distance15 = distance5 + weight;
                    direction15 = direction5;
                }
                if (distance7 + weight < distance15) {
                    distance15 = distance7 + weight;
                    direction15 = direction7;
                }
        }
        switch (yOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                weight = location18.distanceSquaredTo(target) + (rc.senseMapInfo(location18).isWall() ? 10000 : 0);;
                if (distance4 + weight < distance18) {
                    distance18 = distance4 + weight;
                    direction18 = direction4;
                }
                if (distance6 + weight < distance18) {
                    distance18 = distance6 + weight;
                    direction18 = direction6;
                }
                if (distance8 + weight < distance18) {
                    distance18 = distance8 + weight;
                    direction18 = direction8;
                }
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                switch (myY) {
                    case 0:
                        break;
                    default:
                        weight = location10.distanceSquaredTo(target) + (rc.senseMapInfo(location10).isWall() ? 10000 : 0);;
                        if (distance5 + weight < distance10) {
                            distance10 = distance5 + weight;
                            direction10 = direction5;
                        }
                        if (distance9 + weight < distance10) {
                            distance10 = distance9 + weight;
                            direction10 = direction9;
                        }
                        if (distance1 + weight < distance10) {
                            distance10 = distance1 + weight;
                            direction10 = direction1;
                        }
                }
        }
        switch (myX) {
            case 0:
            case 1:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                        break;
                    default:
                        weight = location11.distanceSquaredTo(target) + (rc.senseMapInfo(location11).isWall() ? 10000 : 0);;
                        if (distance6 + weight < distance11) {
                            distance11 = distance6 + weight;
                            direction11 = direction6;
                        }
                        if (distance9 + weight < distance11) {
                            distance11 = distance9 + weight;
                            direction11 = direction9;
                        }
                        if (distance1 + weight < distance11) {
                            distance11 = distance1 + weight;
                            direction11 = direction1;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (myY) {
                    case 0:
                        break;
                    default:
                        weight = location13.distanceSquaredTo(target) + (rc.senseMapInfo(location13).isWall() ? 10000 : 0);;
                        if (distance7 + weight < distance13) {
                            distance13 = distance7 + weight;
                            direction13 = direction7;
                        }
                        if (distance12 + weight < distance13) {
                            distance13 = distance12 + weight;
                            direction13 = direction12;
                        }
                        if (distance2 + weight < distance13) {
                            distance13 = distance2 + weight;
                            direction13 = direction2;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
            case 2:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                        break;
                    default:
                        weight = location14.distanceSquaredTo(target) + (rc.senseMapInfo(location14).isWall() ? 10000 : 0);;
                        if (distance8 + weight < distance14) {
                            distance14 = distance8 + weight;
                            direction14 = direction8;
                        }
                        if (distance12 + weight < distance14) {
                            distance14 = distance12 + weight;
                            direction14 = direction12;
                        }
                        if (distance2 + weight < distance14) {
                            distance14 = distance2 + weight;
                            direction14 = direction2;
                        }
                }
        }
        switch (myX) {
            case 0:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                        break;
                    default:
                        weight = location16.distanceSquaredTo(target) + (rc.senseMapInfo(location16).isWall() ? 10000 : 0);;
                        if (distance15 + weight < distance16) {
                            distance16 = distance15 + weight;
                            direction16 = direction15;
                        }
                        if (distance5 + weight < distance16) {
                            distance16 = distance5 + weight;
                            direction16 = direction5;
                        }
                        if (distance3 + weight < distance16) {
                            distance16 = distance3 + weight;
                            direction16 = direction3;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
                break;
            default:
                switch (myY) {
                    case 0:
                    case 1:
                        break;
                    default:
                        weight = location17.distanceSquaredTo(target) + (rc.senseMapInfo(location17).isWall() ? 10000 : 0);;
                        if (distance15 + weight < distance17) {
                            distance17 = distance15 + weight;
                            direction17 = direction15;
                        }
                        if (distance7 + weight < distance17) {
                            distance17 = distance7 + weight;
                            direction17 = direction7;
                        }
                        if (distance3 + weight < distance17) {
                            distance17 = distance3 + weight;
                            direction17 = direction3;
                        }
                }
        }
        switch (myX) {
            case 0:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        weight = location19.distanceSquaredTo(target) + (rc.senseMapInfo(location19).isWall() ? 10000 : 0);;
                        if (distance18 + weight < distance19) {
                            distance19 = distance18 + weight;
                            direction19 = direction18;
                        }
                        if (distance6 + weight < distance19) {
                            distance19 = distance6 + weight;
                            direction19 = direction6;
                        }
                        if (distance4 + weight < distance19) {
                            distance19 = distance4 + weight;
                            direction19 = direction4;
                        }
                }
        }
        switch (xOffset) {
            case 0:
            case 1:
                break;
            default:
                switch (yOffset) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        weight = location20.distanceSquaredTo(target) + (rc.senseMapInfo(location20).isWall() ? 10000 : 0);;
                        if (distance18 + weight < distance20) {
                            distance20 = distance18 + weight;
                            direction20 = direction18;
                        }
                        if (distance8 + weight < distance20) {
                            distance20 = distance8 + weight;
                            direction20 = direction8;
                        }
                        if (distance4 + weight < distance20) {
                            distance20 = distance4 + weight;
                            direction20 = direction4;
                        }
                }
        }

        switch (target.x - myX) {
            case -2:
                switch (target.y - myY) {
                    case -1:
                        return direction10;
                    case 0:
                        return direction9;
                    case 1:
                        return direction11;
                }
                break;
            case -1:
                switch (target.y - myY) {
                    case -2:
                        return direction16;
                    case -1:
                        return direction5;
                    case 0:
                        return direction1;
                    case 1:
                        return direction6;
                    case 2:
                        return direction19;
                }
                break;
            case 0:
                switch (target.y - myY) {
                    case -2:
                        return direction15;
                    case -1:
                        return direction3;
                    case 1:
                        return direction4;
                    case 2:
                        return direction18;
                }
                break;
            case 1:
                switch (target.y - myY) {
                    case -2:
                        return direction17;
                    case -1:
                        return direction7;
                    case 0:
                        return direction2;
                    case 1:
                        return direction8;
                    case 2:
                        return direction20;
                }
                break;
            case 2:
                switch (target.y - myY) {
                    case -1:
                        return direction13;
                    case 0:
                        return direction12;
                    case 1:
                        return direction14;
                }
                break;
        }

        currentDistance = myLocation.distanceSquaredTo(target);

        score5 = (currentDistance - location5.distanceSquaredTo(target)) / distance5;
        score6 = (currentDistance - location6.distanceSquaredTo(target)) / distance6;
        score7 = (currentDistance - location7.distanceSquaredTo(target)) / distance7;
        score8 = (currentDistance - location8.distanceSquaredTo(target)) / distance8;
        score9 = (currentDistance - location9.distanceSquaredTo(target)) / distance9;
        score12 = (currentDistance - location12.distanceSquaredTo(target)) / distance12;
        score15 = (currentDistance - location15.distanceSquaredTo(target)) / distance15;
        score18 = (currentDistance - location18.distanceSquaredTo(target)) / distance18;
        score10 = (currentDistance - location10.distanceSquaredTo(target)) / distance10;
        score11 = (currentDistance - location11.distanceSquaredTo(target)) / distance11;
        score13 = (currentDistance - location13.distanceSquaredTo(target)) / distance13;
        score14 = (currentDistance - location14.distanceSquaredTo(target)) / distance14;
        score16 = (currentDistance - location16.distanceSquaredTo(target)) / distance16;
        score17 = (currentDistance - location17.distanceSquaredTo(target)) / distance17;
        score19 = (currentDistance - location19.distanceSquaredTo(target)) / distance19;

        maxScore = Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(score5, score6), score7), score8), score9), score12), score15), score18), score10), score11), score13), score14), score16), score17), score19), (currentDistance - location20.distanceSquaredTo(target)) / distance20);

        if (maxScore == score5) {
            return direction5;
        }
        if (maxScore == score6) {
            return direction6;
        }
        if (maxScore == score7) {
            return direction7;
        }
        if (maxScore == score8) {
            return direction8;
        }
        if (maxScore == score9) {
            return direction9;
        }
        if (maxScore == score12) {
            return direction12;
        }
        if (maxScore == score15) {
            return direction15;
        }
        if (maxScore == score18) {
            return direction18;
        }
        if (maxScore == score10) {
            return direction10;
        }
        if (maxScore == score11) {
            return direction11;
        }
        if (maxScore == score13) {
            return direction13;
        }
        if (maxScore == score14) {
            return direction14;
        }
        if (maxScore == score16) {
            return direction16;
        }
        if (maxScore == score17) {
            return direction17;
        }
        if (maxScore == score19) {
            return direction19;
        }

        return direction20;
    }
}
